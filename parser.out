Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COUNT
    PERIOD

Grammar

Rule 0     S' -> programa
Rule 1     programa -> bloque
Rule 2     programa -> bloque programa
Rule 3     programa -> comment bloque programa
Rule 4     comment -> COMMENT1
Rule 5     comment -> COMMENT1 NEWLINE
Rule 6     bloque -> sentencia NEWLINE
Rule 7     bloque -> sentencia
Rule 8     bloque -> NEWLINE
Rule 9     sentencia -> print
Rule 10    sentencia -> asignacion
Rule 11    sentencia -> variable
Rule 12    sentencia -> funcion
Rule 13    sentencia -> if
Rule 14    sentencia -> for
Rule 15    sentencia -> invocar
Rule 16    asignacion -> VARIABLE ASSIGN expresion SEMICOLON
Rule 17    variable -> VARIABLE ASSIGN_ADD d_numericos
Rule 18    variable -> VARIABLE ASSIGN_SUB d_numericos
Rule 19    print -> ECHO datos SEMICOLON
Rule 20    print -> ECHO SEMICOLON
Rule 21    print -> ECHO argumentos SEMICOLON
Rule 22    if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
Rule 23    if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
Rule 24    for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
Rule 25    expresion -> argumentos
Rule 26    expresion -> invocar
Rule 27    expresion -> operacionAritmetica
Rule 28    expresion -> operacionRelacional
Rule 29    expresion -> readline
Rule 30    expresion -> arregloIndexado
Rule 31    expresion -> arregloDeclarado
Rule 32    expresion -> operacionLogica
Rule 33    expresion -> operadorLogico
Rule 34    argumentos -> datos COMMA argumentos
Rule 35    argumentos -> datos
Rule 36    datos -> VARIABLE
Rule 37    datos -> d_strings
Rule 38    datos -> d_numericos
Rule 39    datos -> d_booleanos
Rule 40    d_numericos -> NUMBER
Rule 41    d_numericos -> FLOAT
Rule 42    d_strings -> STRING
Rule 43    d_booleanos -> BOOLEAN
Rule 44    operacionAritmetica -> d_numericos operadorAritmetico d_numericos
Rule 45    operacionAritmetica -> d_numericos operadorAritmetico operacionAritmetica
Rule 46    operacionAritmetica -> d_numericos operadorAritmetico error
Rule 47    operacionModificadoras -> VARIABLE INCREMENT
Rule 48    operacionModificadoras -> VARIABLE DECREMENT
Rule 49    operacionLogica -> operacionRelacional operadorLogico operacionRelacional
Rule 50    operacionLogica -> operacionRelacional operadorLogico operacionLogica
Rule 51    operacionLogica -> <empty>
Rule 52    operacionRelacional -> operacionRelacionalGeneral
Rule 53    operacionRelacional -> operacionRelacionalNumerica
Rule 54    operacionRelacionalGeneral -> datos operadorRelacionalGeneral datos
Rule 55    operacionRelacionalNumerica -> datos operadorRelacionalNumerico d_numericos
Rule 56    operacionRelacionalNumerica -> datos operadorRelacionalNumerico error
Rule 57    operadorAritmetico -> PLUS
Rule 58    operadorAritmetico -> MINUS
Rule 59    operadorAritmetico -> TIMES
Rule 60    operadorAritmetico -> DIVIDE
Rule 61    operadorAritmetico -> MOD
Rule 62    operadorLogico -> LOGICAL_AND
Rule 63    operadorLogico -> LOGICAL_OR
Rule 64    operadorLogico -> LOGICAL_NOT
Rule 65    operadorRelacionalGeneral -> EQUALS
Rule 66    operadorRelacionalGeneral -> DIFFERENT
Rule 67    operadorRelacionalNumerico -> GREATER
Rule 68    operadorRelacionalNumerico -> LESS
Rule 69    operadorRelacionalNumerico -> GREATER_EQUALS
Rule 70    operadorRelacionalNumerico -> LESS_EQUALS
Rule 71    arregloDeclarado -> LCOR NEWLINE cuerpoArregloDeclarado NEWLINE RCOR
Rule 72    cuerpoArregloDeclarado -> datos ASSIGNATION datos
Rule 73    cuerpoArregloDeclarado -> datos ASSIGNATION datos COMMA NEWLINE cuerpoArregloDeclarado
Rule 74    arregloIndexado -> LCOR datos_comma RCOR
Rule 75    funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
Rule 76    funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY
Rule 77    invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
Rule 78    invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON
Rule 79    argumentosFuncion -> argumentoFuncion
Rule 80    argumentosFuncion -> argumentoFuncion argumentosFuncion
Rule 81    argumentoFuncion -> d_numericos
Rule 82    argumentoFuncion -> d_strings
Rule 83    argumentoFuncion -> d_booleanos
Rule 84    argumentoFuncion -> VARIABLE
Rule 85    datos_comma -> datos
Rule 86    datos_comma -> datos COMMA datos_comma
Rule 87    cuerpoFuncion -> programa RETURN expresion SEMICOLON NEWLINE
Rule 88    cuerpoFuncion -> programa
Rule 89    cuerpoFuncion -> RETURN expresion SEMICOLON NEWLINE
Rule 90    readline -> READLINE LPAREN RPAREN

Terminals, with rules where they appear

ASSIGN               : 16 24
ASSIGNATION          : 72 73
ASSIGN_ADD           : 17
ASSIGN_SUB           : 18
BOOLEAN              : 43
COMMA                : 34 73 86
COMMENT1             : 4 5
COUNT                : 
DECREMENT            : 48
DIFFERENT            : 66
DIVIDE               : 60
ECHO                 : 19 20 21
ELSE                 : 23
EQUALS               : 65
FLOAT                : 41
FOR                  : 24
FUNCTION             : 75 76
FUNCTION_NAME        : 75 76 77 78
GREATER              : 67
GREATER_EQUALS       : 69
IF                   : 22 23
INCREMENT            : 47
LCOR                 : 71 74
LESS                 : 68
LESS_EQUALS          : 70
LKEY                 : 22 23 23 24 75 76
LOGICAL_AND          : 62
LOGICAL_NOT          : 64
LOGICAL_OR           : 63
LPAREN               : 22 23 24 75 76 77 78 90
MINUS                : 58
MOD                  : 61
NEWLINE              : 5 6 8 22 23 23 23 24 24 71 71 73 75 76 87 89
NUMBER               : 40
PERIOD               : 
PLUS                 : 57
RCOR                 : 71 74
READLINE             : 90
RETURN               : 87 89
RKEY                 : 22 23 23 24 75 76
RPAREN               : 22 23 24 75 76 77 78 90
SEMICOLON            : 16 19 20 21 24 24 77 78 87 89
STRING               : 42
TIMES                : 59
VARIABLE             : 16 17 18 24 24 36 47 48 84
error                : 46 56

Nonterminals, with rules where they appear

argumentoFuncion     : 79 80
argumentos           : 21 25 34
argumentosFuncion    : 75 80
arregloDeclarado     : 31
arregloIndexado      : 30
asignacion           : 10
bloque               : 1 2 3
comment              : 3
cuerpoArregloDeclarado : 71 73
cuerpoFuncion        : 75 76
d_booleanos          : 39 83
d_numericos          : 17 18 38 44 44 45 46 55 81
d_strings            : 37 82
datos                : 19 24 24 34 35 54 54 55 56 72 72 73 73 85 86
datos_comma          : 74 77 86
expresion            : 16 87 89
for                  : 14
funcion              : 12
if                   : 13
invocar              : 15 26
operacionAritmetica  : 27 45
operacionLogica      : 32 50
operacionModificadoras : 24
operacionRelacional  : 22 23 28 49 49 50
operacionRelacionalGeneral : 52
operacionRelacionalNumerica : 53
operadorAritmetico   : 44 45 46
operadorLogico       : 33 49 50
operadorRelacionalGeneral : 54
operadorRelacionalNumerico : 24 55 56
print                : 9
programa             : 2 3 22 23 23 24 87 88 0
readline             : 29
sentencia            : 6 7
variable             : 11

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . bloque
    (2) programa -> . bloque programa
    (3) programa -> . comment bloque programa
    (6) bloque -> . sentencia NEWLINE
    (7) bloque -> . sentencia
    (8) bloque -> . NEWLINE
    (4) comment -> . COMMENT1
    (5) comment -> . COMMENT1 NEWLINE
    (9) sentencia -> . print
    (10) sentencia -> . asignacion
    (11) sentencia -> . variable
    (12) sentencia -> . funcion
    (13) sentencia -> . if
    (14) sentencia -> . for
    (15) sentencia -> . invocar
    (19) print -> . ECHO datos SEMICOLON
    (20) print -> . ECHO SEMICOLON
    (21) print -> . ECHO argumentos SEMICOLON
    (16) asignacion -> . VARIABLE ASSIGN expresion SEMICOLON
    (17) variable -> . VARIABLE ASSIGN_ADD d_numericos
    (18) variable -> . VARIABLE ASSIGN_SUB d_numericos
    (75) funcion -> . FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> . FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (22) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (24) for -> . FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON

    NEWLINE         shift and go to state 5
    COMMENT1        shift and go to state 6
    ECHO            shift and go to state 14
    VARIABLE        shift and go to state 15
    FUNCTION        shift and go to state 16
    IF              shift and go to state 18
    FOR             shift and go to state 19
    FUNCTION_NAME   shift and go to state 17

    programa                       shift and go to state 1
    bloque                         shift and go to state 2
    comment                        shift and go to state 3
    sentencia                      shift and go to state 4
    print                          shift and go to state 7
    asignacion                     shift and go to state 8
    variable                       shift and go to state 9
    funcion                        shift and go to state 10
    if                             shift and go to state 11
    for                            shift and go to state 12
    invocar                        shift and go to state 13

state 1

    (0) S' -> programa .



state 2

    (1) programa -> bloque .
    (2) programa -> bloque . programa
    (1) programa -> . bloque
    (2) programa -> . bloque programa
    (3) programa -> . comment bloque programa
    (6) bloque -> . sentencia NEWLINE
    (7) bloque -> . sentencia
    (8) bloque -> . NEWLINE
    (4) comment -> . COMMENT1
    (5) comment -> . COMMENT1 NEWLINE
    (9) sentencia -> . print
    (10) sentencia -> . asignacion
    (11) sentencia -> . variable
    (12) sentencia -> . funcion
    (13) sentencia -> . if
    (14) sentencia -> . for
    (15) sentencia -> . invocar
    (19) print -> . ECHO datos SEMICOLON
    (20) print -> . ECHO SEMICOLON
    (21) print -> . ECHO argumentos SEMICOLON
    (16) asignacion -> . VARIABLE ASSIGN expresion SEMICOLON
    (17) variable -> . VARIABLE ASSIGN_ADD d_numericos
    (18) variable -> . VARIABLE ASSIGN_SUB d_numericos
    (75) funcion -> . FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> . FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (22) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (24) for -> . FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON

    $end            reduce using rule 1 (programa -> bloque .)
    RETURN          reduce using rule 1 (programa -> bloque .)
    RKEY            reduce using rule 1 (programa -> bloque .)
    NEWLINE         shift and go to state 5
    COMMENT1        shift and go to state 6
    ECHO            shift and go to state 14
    VARIABLE        shift and go to state 15
    FUNCTION        shift and go to state 16
    IF              shift and go to state 18
    FOR             shift and go to state 19
    FUNCTION_NAME   shift and go to state 17

    bloque                         shift and go to state 2
    programa                       shift and go to state 20
    comment                        shift and go to state 3
    sentencia                      shift and go to state 4
    print                          shift and go to state 7
    asignacion                     shift and go to state 8
    variable                       shift and go to state 9
    funcion                        shift and go to state 10
    if                             shift and go to state 11
    for                            shift and go to state 12
    invocar                        shift and go to state 13

state 3

    (3) programa -> comment . bloque programa
    (6) bloque -> . sentencia NEWLINE
    (7) bloque -> . sentencia
    (8) bloque -> . NEWLINE
    (9) sentencia -> . print
    (10) sentencia -> . asignacion
    (11) sentencia -> . variable
    (12) sentencia -> . funcion
    (13) sentencia -> . if
    (14) sentencia -> . for
    (15) sentencia -> . invocar
    (19) print -> . ECHO datos SEMICOLON
    (20) print -> . ECHO SEMICOLON
    (21) print -> . ECHO argumentos SEMICOLON
    (16) asignacion -> . VARIABLE ASSIGN expresion SEMICOLON
    (17) variable -> . VARIABLE ASSIGN_ADD d_numericos
    (18) variable -> . VARIABLE ASSIGN_SUB d_numericos
    (75) funcion -> . FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> . FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (22) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (24) for -> . FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON

    NEWLINE         shift and go to state 5
    ECHO            shift and go to state 14
    VARIABLE        shift and go to state 15
    FUNCTION        shift and go to state 16
    IF              shift and go to state 18
    FOR             shift and go to state 19
    FUNCTION_NAME   shift and go to state 17

    bloque                         shift and go to state 21
    sentencia                      shift and go to state 4
    print                          shift and go to state 7
    asignacion                     shift and go to state 8
    variable                       shift and go to state 9
    funcion                        shift and go to state 10
    if                             shift and go to state 11
    for                            shift and go to state 12
    invocar                        shift and go to state 13

state 4

    (6) bloque -> sentencia . NEWLINE
    (7) bloque -> sentencia .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 22
    COMMENT1        reduce using rule 7 (bloque -> sentencia .)
    ECHO            reduce using rule 7 (bloque -> sentencia .)
    VARIABLE        reduce using rule 7 (bloque -> sentencia .)
    FUNCTION        reduce using rule 7 (bloque -> sentencia .)
    IF              reduce using rule 7 (bloque -> sentencia .)
    FOR             reduce using rule 7 (bloque -> sentencia .)
    FUNCTION_NAME   reduce using rule 7 (bloque -> sentencia .)
    $end            reduce using rule 7 (bloque -> sentencia .)
    RETURN          reduce using rule 7 (bloque -> sentencia .)
    RKEY            reduce using rule 7 (bloque -> sentencia .)

  ! NEWLINE         [ reduce using rule 7 (bloque -> sentencia .) ]


state 5

    (8) bloque -> NEWLINE .

    NEWLINE         reduce using rule 8 (bloque -> NEWLINE .)
    COMMENT1        reduce using rule 8 (bloque -> NEWLINE .)
    ECHO            reduce using rule 8 (bloque -> NEWLINE .)
    VARIABLE        reduce using rule 8 (bloque -> NEWLINE .)
    FUNCTION        reduce using rule 8 (bloque -> NEWLINE .)
    IF              reduce using rule 8 (bloque -> NEWLINE .)
    FOR             reduce using rule 8 (bloque -> NEWLINE .)
    FUNCTION_NAME   reduce using rule 8 (bloque -> NEWLINE .)
    $end            reduce using rule 8 (bloque -> NEWLINE .)
    RETURN          reduce using rule 8 (bloque -> NEWLINE .)
    RKEY            reduce using rule 8 (bloque -> NEWLINE .)


state 6

    (4) comment -> COMMENT1 .
    (5) comment -> COMMENT1 . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    ECHO            reduce using rule 4 (comment -> COMMENT1 .)
    VARIABLE        reduce using rule 4 (comment -> COMMENT1 .)
    FUNCTION        reduce using rule 4 (comment -> COMMENT1 .)
    IF              reduce using rule 4 (comment -> COMMENT1 .)
    FOR             reduce using rule 4 (comment -> COMMENT1 .)
    FUNCTION_NAME   reduce using rule 4 (comment -> COMMENT1 .)
    NEWLINE         shift and go to state 23

  ! NEWLINE         [ reduce using rule 4 (comment -> COMMENT1 .) ]


state 7

    (9) sentencia -> print .

    NEWLINE         reduce using rule 9 (sentencia -> print .)
    COMMENT1        reduce using rule 9 (sentencia -> print .)
    ECHO            reduce using rule 9 (sentencia -> print .)
    VARIABLE        reduce using rule 9 (sentencia -> print .)
    FUNCTION        reduce using rule 9 (sentencia -> print .)
    IF              reduce using rule 9 (sentencia -> print .)
    FOR             reduce using rule 9 (sentencia -> print .)
    FUNCTION_NAME   reduce using rule 9 (sentencia -> print .)
    $end            reduce using rule 9 (sentencia -> print .)
    RETURN          reduce using rule 9 (sentencia -> print .)
    RKEY            reduce using rule 9 (sentencia -> print .)


state 8

    (10) sentencia -> asignacion .

    NEWLINE         reduce using rule 10 (sentencia -> asignacion .)
    COMMENT1        reduce using rule 10 (sentencia -> asignacion .)
    ECHO            reduce using rule 10 (sentencia -> asignacion .)
    VARIABLE        reduce using rule 10 (sentencia -> asignacion .)
    FUNCTION        reduce using rule 10 (sentencia -> asignacion .)
    IF              reduce using rule 10 (sentencia -> asignacion .)
    FOR             reduce using rule 10 (sentencia -> asignacion .)
    FUNCTION_NAME   reduce using rule 10 (sentencia -> asignacion .)
    $end            reduce using rule 10 (sentencia -> asignacion .)
    RETURN          reduce using rule 10 (sentencia -> asignacion .)
    RKEY            reduce using rule 10 (sentencia -> asignacion .)


state 9

    (11) sentencia -> variable .

    NEWLINE         reduce using rule 11 (sentencia -> variable .)
    COMMENT1        reduce using rule 11 (sentencia -> variable .)
    ECHO            reduce using rule 11 (sentencia -> variable .)
    VARIABLE        reduce using rule 11 (sentencia -> variable .)
    FUNCTION        reduce using rule 11 (sentencia -> variable .)
    IF              reduce using rule 11 (sentencia -> variable .)
    FOR             reduce using rule 11 (sentencia -> variable .)
    FUNCTION_NAME   reduce using rule 11 (sentencia -> variable .)
    $end            reduce using rule 11 (sentencia -> variable .)
    RETURN          reduce using rule 11 (sentencia -> variable .)
    RKEY            reduce using rule 11 (sentencia -> variable .)


state 10

    (12) sentencia -> funcion .

    NEWLINE         reduce using rule 12 (sentencia -> funcion .)
    COMMENT1        reduce using rule 12 (sentencia -> funcion .)
    ECHO            reduce using rule 12 (sentencia -> funcion .)
    VARIABLE        reduce using rule 12 (sentencia -> funcion .)
    FUNCTION        reduce using rule 12 (sentencia -> funcion .)
    IF              reduce using rule 12 (sentencia -> funcion .)
    FOR             reduce using rule 12 (sentencia -> funcion .)
    FUNCTION_NAME   reduce using rule 12 (sentencia -> funcion .)
    $end            reduce using rule 12 (sentencia -> funcion .)
    RETURN          reduce using rule 12 (sentencia -> funcion .)
    RKEY            reduce using rule 12 (sentencia -> funcion .)


state 11

    (13) sentencia -> if .

    NEWLINE         reduce using rule 13 (sentencia -> if .)
    COMMENT1        reduce using rule 13 (sentencia -> if .)
    ECHO            reduce using rule 13 (sentencia -> if .)
    VARIABLE        reduce using rule 13 (sentencia -> if .)
    FUNCTION        reduce using rule 13 (sentencia -> if .)
    IF              reduce using rule 13 (sentencia -> if .)
    FOR             reduce using rule 13 (sentencia -> if .)
    FUNCTION_NAME   reduce using rule 13 (sentencia -> if .)
    $end            reduce using rule 13 (sentencia -> if .)
    RETURN          reduce using rule 13 (sentencia -> if .)
    RKEY            reduce using rule 13 (sentencia -> if .)


state 12

    (14) sentencia -> for .

    NEWLINE         reduce using rule 14 (sentencia -> for .)
    COMMENT1        reduce using rule 14 (sentencia -> for .)
    ECHO            reduce using rule 14 (sentencia -> for .)
    VARIABLE        reduce using rule 14 (sentencia -> for .)
    FUNCTION        reduce using rule 14 (sentencia -> for .)
    IF              reduce using rule 14 (sentencia -> for .)
    FOR             reduce using rule 14 (sentencia -> for .)
    FUNCTION_NAME   reduce using rule 14 (sentencia -> for .)
    $end            reduce using rule 14 (sentencia -> for .)
    RETURN          reduce using rule 14 (sentencia -> for .)
    RKEY            reduce using rule 14 (sentencia -> for .)


state 13

    (15) sentencia -> invocar .

    NEWLINE         reduce using rule 15 (sentencia -> invocar .)
    COMMENT1        reduce using rule 15 (sentencia -> invocar .)
    ECHO            reduce using rule 15 (sentencia -> invocar .)
    VARIABLE        reduce using rule 15 (sentencia -> invocar .)
    FUNCTION        reduce using rule 15 (sentencia -> invocar .)
    IF              reduce using rule 15 (sentencia -> invocar .)
    FOR             reduce using rule 15 (sentencia -> invocar .)
    FUNCTION_NAME   reduce using rule 15 (sentencia -> invocar .)
    $end            reduce using rule 15 (sentencia -> invocar .)
    RETURN          reduce using rule 15 (sentencia -> invocar .)
    RKEY            reduce using rule 15 (sentencia -> invocar .)


state 14

    (19) print -> ECHO . datos SEMICOLON
    (20) print -> ECHO . SEMICOLON
    (21) print -> ECHO . argumentos SEMICOLON
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (34) argumentos -> . datos COMMA argumentos
    (35) argumentos -> . datos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    SEMICOLON       shift and go to state 25
    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    datos                          shift and go to state 24
    argumentos                     shift and go to state 26
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 15

    (16) asignacion -> VARIABLE . ASSIGN expresion SEMICOLON
    (17) variable -> VARIABLE . ASSIGN_ADD d_numericos
    (18) variable -> VARIABLE . ASSIGN_SUB d_numericos

    ASSIGN          shift and go to state 35
    ASSIGN_ADD      shift and go to state 36
    ASSIGN_SUB      shift and go to state 37


state 16

    (75) funcion -> FUNCTION . FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> FUNCTION . FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY

    FUNCTION_NAME   shift and go to state 38


state 17

    (77) invocar -> FUNCTION_NAME . LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> FUNCTION_NAME . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 39


state 18

    (22) if -> IF . LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> IF . LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE

    LPAREN          shift and go to state 40


state 19

    (24) for -> FOR . LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE

    LPAREN          shift and go to state 41


state 20

    (2) programa -> bloque programa .

    $end            reduce using rule 2 (programa -> bloque programa .)
    RETURN          reduce using rule 2 (programa -> bloque programa .)
    RKEY            reduce using rule 2 (programa -> bloque programa .)


state 21

    (3) programa -> comment bloque . programa
    (1) programa -> . bloque
    (2) programa -> . bloque programa
    (3) programa -> . comment bloque programa
    (6) bloque -> . sentencia NEWLINE
    (7) bloque -> . sentencia
    (8) bloque -> . NEWLINE
    (4) comment -> . COMMENT1
    (5) comment -> . COMMENT1 NEWLINE
    (9) sentencia -> . print
    (10) sentencia -> . asignacion
    (11) sentencia -> . variable
    (12) sentencia -> . funcion
    (13) sentencia -> . if
    (14) sentencia -> . for
    (15) sentencia -> . invocar
    (19) print -> . ECHO datos SEMICOLON
    (20) print -> . ECHO SEMICOLON
    (21) print -> . ECHO argumentos SEMICOLON
    (16) asignacion -> . VARIABLE ASSIGN expresion SEMICOLON
    (17) variable -> . VARIABLE ASSIGN_ADD d_numericos
    (18) variable -> . VARIABLE ASSIGN_SUB d_numericos
    (75) funcion -> . FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> . FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (22) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (24) for -> . FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON

    NEWLINE         shift and go to state 5
    COMMENT1        shift and go to state 6
    ECHO            shift and go to state 14
    VARIABLE        shift and go to state 15
    FUNCTION        shift and go to state 16
    IF              shift and go to state 18
    FOR             shift and go to state 19
    FUNCTION_NAME   shift and go to state 17

    comment                        shift and go to state 3
    bloque                         shift and go to state 2
    programa                       shift and go to state 42
    sentencia                      shift and go to state 4
    print                          shift and go to state 7
    asignacion                     shift and go to state 8
    variable                       shift and go to state 9
    funcion                        shift and go to state 10
    if                             shift and go to state 11
    for                            shift and go to state 12
    invocar                        shift and go to state 13

state 22

    (6) bloque -> sentencia NEWLINE .

    NEWLINE         reduce using rule 6 (bloque -> sentencia NEWLINE .)
    COMMENT1        reduce using rule 6 (bloque -> sentencia NEWLINE .)
    ECHO            reduce using rule 6 (bloque -> sentencia NEWLINE .)
    VARIABLE        reduce using rule 6 (bloque -> sentencia NEWLINE .)
    FUNCTION        reduce using rule 6 (bloque -> sentencia NEWLINE .)
    IF              reduce using rule 6 (bloque -> sentencia NEWLINE .)
    FOR             reduce using rule 6 (bloque -> sentencia NEWLINE .)
    FUNCTION_NAME   reduce using rule 6 (bloque -> sentencia NEWLINE .)
    $end            reduce using rule 6 (bloque -> sentencia NEWLINE .)
    RETURN          reduce using rule 6 (bloque -> sentencia NEWLINE .)
    RKEY            reduce using rule 6 (bloque -> sentencia NEWLINE .)


state 23

    (5) comment -> COMMENT1 NEWLINE .

    NEWLINE         reduce using rule 5 (comment -> COMMENT1 NEWLINE .)
    ECHO            reduce using rule 5 (comment -> COMMENT1 NEWLINE .)
    VARIABLE        reduce using rule 5 (comment -> COMMENT1 NEWLINE .)
    FUNCTION        reduce using rule 5 (comment -> COMMENT1 NEWLINE .)
    IF              reduce using rule 5 (comment -> COMMENT1 NEWLINE .)
    FOR             reduce using rule 5 (comment -> COMMENT1 NEWLINE .)
    FUNCTION_NAME   reduce using rule 5 (comment -> COMMENT1 NEWLINE .)


state 24

    (19) print -> ECHO datos . SEMICOLON
    (34) argumentos -> datos . COMMA argumentos
    (35) argumentos -> datos .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 43
    COMMA           shift and go to state 44

  ! SEMICOLON       [ reduce using rule 35 (argumentos -> datos .) ]


state 25

    (20) print -> ECHO SEMICOLON .

    NEWLINE         reduce using rule 20 (print -> ECHO SEMICOLON .)
    COMMENT1        reduce using rule 20 (print -> ECHO SEMICOLON .)
    ECHO            reduce using rule 20 (print -> ECHO SEMICOLON .)
    VARIABLE        reduce using rule 20 (print -> ECHO SEMICOLON .)
    FUNCTION        reduce using rule 20 (print -> ECHO SEMICOLON .)
    IF              reduce using rule 20 (print -> ECHO SEMICOLON .)
    FOR             reduce using rule 20 (print -> ECHO SEMICOLON .)
    FUNCTION_NAME   reduce using rule 20 (print -> ECHO SEMICOLON .)
    $end            reduce using rule 20 (print -> ECHO SEMICOLON .)
    RETURN          reduce using rule 20 (print -> ECHO SEMICOLON .)
    RKEY            reduce using rule 20 (print -> ECHO SEMICOLON .)


state 26

    (21) print -> ECHO argumentos . SEMICOLON

    SEMICOLON       shift and go to state 45


state 27

    (36) datos -> VARIABLE .

    SEMICOLON       reduce using rule 36 (datos -> VARIABLE .)
    COMMA           reduce using rule 36 (datos -> VARIABLE .)
    EQUALS          reduce using rule 36 (datos -> VARIABLE .)
    DIFFERENT       reduce using rule 36 (datos -> VARIABLE .)
    GREATER         reduce using rule 36 (datos -> VARIABLE .)
    LESS            reduce using rule 36 (datos -> VARIABLE .)
    GREATER_EQUALS  reduce using rule 36 (datos -> VARIABLE .)
    LESS_EQUALS     reduce using rule 36 (datos -> VARIABLE .)
    RPAREN          reduce using rule 36 (datos -> VARIABLE .)
    RCOR            reduce using rule 36 (datos -> VARIABLE .)
    LOGICAL_AND     reduce using rule 36 (datos -> VARIABLE .)
    LOGICAL_OR      reduce using rule 36 (datos -> VARIABLE .)
    LOGICAL_NOT     reduce using rule 36 (datos -> VARIABLE .)
    ASSIGNATION     reduce using rule 36 (datos -> VARIABLE .)
    NEWLINE         reduce using rule 36 (datos -> VARIABLE .)


state 28

    (37) datos -> d_strings .

    SEMICOLON       reduce using rule 37 (datos -> d_strings .)
    COMMA           reduce using rule 37 (datos -> d_strings .)
    EQUALS          reduce using rule 37 (datos -> d_strings .)
    DIFFERENT       reduce using rule 37 (datos -> d_strings .)
    GREATER         reduce using rule 37 (datos -> d_strings .)
    LESS            reduce using rule 37 (datos -> d_strings .)
    GREATER_EQUALS  reduce using rule 37 (datos -> d_strings .)
    LESS_EQUALS     reduce using rule 37 (datos -> d_strings .)
    RPAREN          reduce using rule 37 (datos -> d_strings .)
    RCOR            reduce using rule 37 (datos -> d_strings .)
    LOGICAL_AND     reduce using rule 37 (datos -> d_strings .)
    LOGICAL_OR      reduce using rule 37 (datos -> d_strings .)
    LOGICAL_NOT     reduce using rule 37 (datos -> d_strings .)
    ASSIGNATION     reduce using rule 37 (datos -> d_strings .)
    NEWLINE         reduce using rule 37 (datos -> d_strings .)


state 29

    (38) datos -> d_numericos .

    SEMICOLON       reduce using rule 38 (datos -> d_numericos .)
    COMMA           reduce using rule 38 (datos -> d_numericos .)
    RPAREN          reduce using rule 38 (datos -> d_numericos .)
    EQUALS          reduce using rule 38 (datos -> d_numericos .)
    DIFFERENT       reduce using rule 38 (datos -> d_numericos .)
    GREATER         reduce using rule 38 (datos -> d_numericos .)
    LESS            reduce using rule 38 (datos -> d_numericos .)
    GREATER_EQUALS  reduce using rule 38 (datos -> d_numericos .)
    LESS_EQUALS     reduce using rule 38 (datos -> d_numericos .)
    RCOR            reduce using rule 38 (datos -> d_numericos .)
    LOGICAL_AND     reduce using rule 38 (datos -> d_numericos .)
    LOGICAL_OR      reduce using rule 38 (datos -> d_numericos .)
    LOGICAL_NOT     reduce using rule 38 (datos -> d_numericos .)
    ASSIGNATION     reduce using rule 38 (datos -> d_numericos .)
    NEWLINE         reduce using rule 38 (datos -> d_numericos .)


state 30

    (39) datos -> d_booleanos .

    SEMICOLON       reduce using rule 39 (datos -> d_booleanos .)
    COMMA           reduce using rule 39 (datos -> d_booleanos .)
    EQUALS          reduce using rule 39 (datos -> d_booleanos .)
    DIFFERENT       reduce using rule 39 (datos -> d_booleanos .)
    GREATER         reduce using rule 39 (datos -> d_booleanos .)
    LESS            reduce using rule 39 (datos -> d_booleanos .)
    GREATER_EQUALS  reduce using rule 39 (datos -> d_booleanos .)
    LESS_EQUALS     reduce using rule 39 (datos -> d_booleanos .)
    RPAREN          reduce using rule 39 (datos -> d_booleanos .)
    RCOR            reduce using rule 39 (datos -> d_booleanos .)
    LOGICAL_AND     reduce using rule 39 (datos -> d_booleanos .)
    LOGICAL_OR      reduce using rule 39 (datos -> d_booleanos .)
    LOGICAL_NOT     reduce using rule 39 (datos -> d_booleanos .)
    ASSIGNATION     reduce using rule 39 (datos -> d_booleanos .)
    NEWLINE         reduce using rule 39 (datos -> d_booleanos .)


state 31

    (42) d_strings -> STRING .

    SEMICOLON       reduce using rule 42 (d_strings -> STRING .)
    COMMA           reduce using rule 42 (d_strings -> STRING .)
    EQUALS          reduce using rule 42 (d_strings -> STRING .)
    DIFFERENT       reduce using rule 42 (d_strings -> STRING .)
    GREATER         reduce using rule 42 (d_strings -> STRING .)
    LESS            reduce using rule 42 (d_strings -> STRING .)
    GREATER_EQUALS  reduce using rule 42 (d_strings -> STRING .)
    LESS_EQUALS     reduce using rule 42 (d_strings -> STRING .)
    RPAREN          reduce using rule 42 (d_strings -> STRING .)
    RCOR            reduce using rule 42 (d_strings -> STRING .)
    VARIABLE        reduce using rule 42 (d_strings -> STRING .)
    NUMBER          reduce using rule 42 (d_strings -> STRING .)
    FLOAT           reduce using rule 42 (d_strings -> STRING .)
    STRING          reduce using rule 42 (d_strings -> STRING .)
    BOOLEAN         reduce using rule 42 (d_strings -> STRING .)
    LOGICAL_AND     reduce using rule 42 (d_strings -> STRING .)
    LOGICAL_OR      reduce using rule 42 (d_strings -> STRING .)
    LOGICAL_NOT     reduce using rule 42 (d_strings -> STRING .)
    ASSIGNATION     reduce using rule 42 (d_strings -> STRING .)
    NEWLINE         reduce using rule 42 (d_strings -> STRING .)


state 32

    (40) d_numericos -> NUMBER .

    SEMICOLON       reduce using rule 40 (d_numericos -> NUMBER .)
    COMMA           reduce using rule 40 (d_numericos -> NUMBER .)
    PLUS            reduce using rule 40 (d_numericos -> NUMBER .)
    MINUS           reduce using rule 40 (d_numericos -> NUMBER .)
    TIMES           reduce using rule 40 (d_numericos -> NUMBER .)
    DIVIDE          reduce using rule 40 (d_numericos -> NUMBER .)
    MOD             reduce using rule 40 (d_numericos -> NUMBER .)
    EQUALS          reduce using rule 40 (d_numericos -> NUMBER .)
    DIFFERENT       reduce using rule 40 (d_numericos -> NUMBER .)
    GREATER         reduce using rule 40 (d_numericos -> NUMBER .)
    LESS            reduce using rule 40 (d_numericos -> NUMBER .)
    GREATER_EQUALS  reduce using rule 40 (d_numericos -> NUMBER .)
    LESS_EQUALS     reduce using rule 40 (d_numericos -> NUMBER .)
    NEWLINE         reduce using rule 40 (d_numericos -> NUMBER .)
    COMMENT1        reduce using rule 40 (d_numericos -> NUMBER .)
    ECHO            reduce using rule 40 (d_numericos -> NUMBER .)
    VARIABLE        reduce using rule 40 (d_numericos -> NUMBER .)
    FUNCTION        reduce using rule 40 (d_numericos -> NUMBER .)
    IF              reduce using rule 40 (d_numericos -> NUMBER .)
    FOR             reduce using rule 40 (d_numericos -> NUMBER .)
    FUNCTION_NAME   reduce using rule 40 (d_numericos -> NUMBER .)
    $end            reduce using rule 40 (d_numericos -> NUMBER .)
    RETURN          reduce using rule 40 (d_numericos -> NUMBER .)
    RKEY            reduce using rule 40 (d_numericos -> NUMBER .)
    RPAREN          reduce using rule 40 (d_numericos -> NUMBER .)
    RCOR            reduce using rule 40 (d_numericos -> NUMBER .)
    NUMBER          reduce using rule 40 (d_numericos -> NUMBER .)
    FLOAT           reduce using rule 40 (d_numericos -> NUMBER .)
    STRING          reduce using rule 40 (d_numericos -> NUMBER .)
    BOOLEAN         reduce using rule 40 (d_numericos -> NUMBER .)
    LOGICAL_AND     reduce using rule 40 (d_numericos -> NUMBER .)
    LOGICAL_OR      reduce using rule 40 (d_numericos -> NUMBER .)
    LOGICAL_NOT     reduce using rule 40 (d_numericos -> NUMBER .)
    ASSIGNATION     reduce using rule 40 (d_numericos -> NUMBER .)


state 33

    (41) d_numericos -> FLOAT .

    SEMICOLON       reduce using rule 41 (d_numericos -> FLOAT .)
    COMMA           reduce using rule 41 (d_numericos -> FLOAT .)
    PLUS            reduce using rule 41 (d_numericos -> FLOAT .)
    MINUS           reduce using rule 41 (d_numericos -> FLOAT .)
    TIMES           reduce using rule 41 (d_numericos -> FLOAT .)
    DIVIDE          reduce using rule 41 (d_numericos -> FLOAT .)
    MOD             reduce using rule 41 (d_numericos -> FLOAT .)
    EQUALS          reduce using rule 41 (d_numericos -> FLOAT .)
    DIFFERENT       reduce using rule 41 (d_numericos -> FLOAT .)
    GREATER         reduce using rule 41 (d_numericos -> FLOAT .)
    LESS            reduce using rule 41 (d_numericos -> FLOAT .)
    GREATER_EQUALS  reduce using rule 41 (d_numericos -> FLOAT .)
    LESS_EQUALS     reduce using rule 41 (d_numericos -> FLOAT .)
    NEWLINE         reduce using rule 41 (d_numericos -> FLOAT .)
    COMMENT1        reduce using rule 41 (d_numericos -> FLOAT .)
    ECHO            reduce using rule 41 (d_numericos -> FLOAT .)
    VARIABLE        reduce using rule 41 (d_numericos -> FLOAT .)
    FUNCTION        reduce using rule 41 (d_numericos -> FLOAT .)
    IF              reduce using rule 41 (d_numericos -> FLOAT .)
    FOR             reduce using rule 41 (d_numericos -> FLOAT .)
    FUNCTION_NAME   reduce using rule 41 (d_numericos -> FLOAT .)
    $end            reduce using rule 41 (d_numericos -> FLOAT .)
    RETURN          reduce using rule 41 (d_numericos -> FLOAT .)
    RKEY            reduce using rule 41 (d_numericos -> FLOAT .)
    RPAREN          reduce using rule 41 (d_numericos -> FLOAT .)
    RCOR            reduce using rule 41 (d_numericos -> FLOAT .)
    NUMBER          reduce using rule 41 (d_numericos -> FLOAT .)
    FLOAT           reduce using rule 41 (d_numericos -> FLOAT .)
    STRING          reduce using rule 41 (d_numericos -> FLOAT .)
    BOOLEAN         reduce using rule 41 (d_numericos -> FLOAT .)
    LOGICAL_AND     reduce using rule 41 (d_numericos -> FLOAT .)
    LOGICAL_OR      reduce using rule 41 (d_numericos -> FLOAT .)
    LOGICAL_NOT     reduce using rule 41 (d_numericos -> FLOAT .)
    ASSIGNATION     reduce using rule 41 (d_numericos -> FLOAT .)


state 34

    (43) d_booleanos -> BOOLEAN .

    SEMICOLON       reduce using rule 43 (d_booleanos -> BOOLEAN .)
    COMMA           reduce using rule 43 (d_booleanos -> BOOLEAN .)
    EQUALS          reduce using rule 43 (d_booleanos -> BOOLEAN .)
    DIFFERENT       reduce using rule 43 (d_booleanos -> BOOLEAN .)
    GREATER         reduce using rule 43 (d_booleanos -> BOOLEAN .)
    LESS            reduce using rule 43 (d_booleanos -> BOOLEAN .)
    GREATER_EQUALS  reduce using rule 43 (d_booleanos -> BOOLEAN .)
    LESS_EQUALS     reduce using rule 43 (d_booleanos -> BOOLEAN .)
    RPAREN          reduce using rule 43 (d_booleanos -> BOOLEAN .)
    RCOR            reduce using rule 43 (d_booleanos -> BOOLEAN .)
    VARIABLE        reduce using rule 43 (d_booleanos -> BOOLEAN .)
    NUMBER          reduce using rule 43 (d_booleanos -> BOOLEAN .)
    FLOAT           reduce using rule 43 (d_booleanos -> BOOLEAN .)
    STRING          reduce using rule 43 (d_booleanos -> BOOLEAN .)
    BOOLEAN         reduce using rule 43 (d_booleanos -> BOOLEAN .)
    LOGICAL_AND     reduce using rule 43 (d_booleanos -> BOOLEAN .)
    LOGICAL_OR      reduce using rule 43 (d_booleanos -> BOOLEAN .)
    LOGICAL_NOT     reduce using rule 43 (d_booleanos -> BOOLEAN .)
    ASSIGNATION     reduce using rule 43 (d_booleanos -> BOOLEAN .)
    NEWLINE         reduce using rule 43 (d_booleanos -> BOOLEAN .)


state 35

    (16) asignacion -> VARIABLE ASSIGN . expresion SEMICOLON
    (25) expresion -> . argumentos
    (26) expresion -> . invocar
    (27) expresion -> . operacionAritmetica
    (28) expresion -> . operacionRelacional
    (29) expresion -> . readline
    (30) expresion -> . arregloIndexado
    (31) expresion -> . arregloDeclarado
    (32) expresion -> . operacionLogica
    (33) expresion -> . operadorLogico
    (34) argumentos -> . datos COMMA argumentos
    (35) argumentos -> . datos
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON
    (44) operacionAritmetica -> . d_numericos operadorAritmetico d_numericos
    (45) operacionAritmetica -> . d_numericos operadorAritmetico operacionAritmetica
    (46) operacionAritmetica -> . d_numericos operadorAritmetico error
    (52) operacionRelacional -> . operacionRelacionalGeneral
    (53) operacionRelacional -> . operacionRelacionalNumerica
    (90) readline -> . READLINE LPAREN RPAREN
    (74) arregloIndexado -> . LCOR datos_comma RCOR
    (71) arregloDeclarado -> . LCOR NEWLINE cuerpoArregloDeclarado NEWLINE RCOR
    (49) operacionLogica -> . operacionRelacional operadorLogico operacionRelacional
    (50) operacionLogica -> . operacionRelacional operadorLogico operacionLogica
    (51) operacionLogica -> .
    (62) operadorLogico -> . LOGICAL_AND
    (63) operadorLogico -> . LOGICAL_OR
    (64) operadorLogico -> . LOGICAL_NOT
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (54) operacionRelacionalGeneral -> . datos operadorRelacionalGeneral datos
    (55) operacionRelacionalNumerica -> . datos operadorRelacionalNumerico d_numericos
    (56) operacionRelacionalNumerica -> . datos operadorRelacionalNumerico error
    (42) d_strings -> . STRING
    (43) d_booleanos -> . BOOLEAN

    FUNCTION_NAME   shift and go to state 17
    READLINE        shift and go to state 60
    LCOR            shift and go to state 61
    SEMICOLON       reduce using rule 51 (operacionLogica -> .)
    LOGICAL_AND     shift and go to state 62
    LOGICAL_OR      shift and go to state 63
    LOGICAL_NOT     shift and go to state 64
    VARIABLE        shift and go to state 27
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 34

    expresion                      shift and go to state 46
    argumentos                     shift and go to state 47
    invocar                        shift and go to state 48
    operacionAritmetica            shift and go to state 49
    operacionRelacional            shift and go to state 50
    readline                       shift and go to state 51
    arregloIndexado                shift and go to state 52
    arregloDeclarado               shift and go to state 53
    operacionLogica                shift and go to state 54
    operadorLogico                 shift and go to state 55
    datos                          shift and go to state 56
    d_numericos                    shift and go to state 57
    operacionRelacionalGeneral     shift and go to state 58
    operacionRelacionalNumerica    shift and go to state 59
    d_strings                      shift and go to state 28
    d_booleanos                    shift and go to state 30

state 36

    (17) variable -> VARIABLE ASSIGN_ADD . d_numericos
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT

    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33

    d_numericos                    shift and go to state 65

state 37

    (18) variable -> VARIABLE ASSIGN_SUB . d_numericos
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT

    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33

    d_numericos                    shift and go to state 66

state 38

    (75) funcion -> FUNCTION FUNCTION_NAME . LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> FUNCTION FUNCTION_NAME . LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY

    LPAREN          shift and go to state 67


state 39

    (77) invocar -> FUNCTION_NAME LPAREN . datos_comma RPAREN SEMICOLON
    (78) invocar -> FUNCTION_NAME LPAREN . RPAREN SEMICOLON
    (85) datos_comma -> . datos
    (86) datos_comma -> . datos COMMA datos_comma
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    RPAREN          shift and go to state 69
    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    datos_comma                    shift and go to state 68
    datos                          shift and go to state 70
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 40

    (22) if -> IF LPAREN . operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> IF LPAREN . operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (52) operacionRelacional -> . operacionRelacionalGeneral
    (53) operacionRelacional -> . operacionRelacionalNumerica
    (54) operacionRelacionalGeneral -> . datos operadorRelacionalGeneral datos
    (55) operacionRelacionalNumerica -> . datos operadorRelacionalNumerico d_numericos
    (56) operacionRelacionalNumerica -> . datos operadorRelacionalNumerico error
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    operacionRelacional            shift and go to state 71
    operacionRelacionalGeneral     shift and go to state 58
    operacionRelacionalNumerica    shift and go to state 59
    datos                          shift and go to state 72
    d_numericos                    shift and go to state 29
    d_strings                      shift and go to state 28
    d_booleanos                    shift and go to state 30

state 41

    (24) for -> FOR LPAREN . VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE

    VARIABLE        shift and go to state 73


state 42

    (3) programa -> comment bloque programa .

    $end            reduce using rule 3 (programa -> comment bloque programa .)
    RETURN          reduce using rule 3 (programa -> comment bloque programa .)
    RKEY            reduce using rule 3 (programa -> comment bloque programa .)


state 43

    (19) print -> ECHO datos SEMICOLON .

    NEWLINE         reduce using rule 19 (print -> ECHO datos SEMICOLON .)
    COMMENT1        reduce using rule 19 (print -> ECHO datos SEMICOLON .)
    ECHO            reduce using rule 19 (print -> ECHO datos SEMICOLON .)
    VARIABLE        reduce using rule 19 (print -> ECHO datos SEMICOLON .)
    FUNCTION        reduce using rule 19 (print -> ECHO datos SEMICOLON .)
    IF              reduce using rule 19 (print -> ECHO datos SEMICOLON .)
    FOR             reduce using rule 19 (print -> ECHO datos SEMICOLON .)
    FUNCTION_NAME   reduce using rule 19 (print -> ECHO datos SEMICOLON .)
    $end            reduce using rule 19 (print -> ECHO datos SEMICOLON .)
    RETURN          reduce using rule 19 (print -> ECHO datos SEMICOLON .)
    RKEY            reduce using rule 19 (print -> ECHO datos SEMICOLON .)


state 44

    (34) argumentos -> datos COMMA . argumentos
    (34) argumentos -> . datos COMMA argumentos
    (35) argumentos -> . datos
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    datos                          shift and go to state 74
    argumentos                     shift and go to state 75
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 45

    (21) print -> ECHO argumentos SEMICOLON .

    NEWLINE         reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)
    COMMENT1        reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)
    ECHO            reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)
    VARIABLE        reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)
    FUNCTION        reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)
    IF              reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)
    FOR             reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)
    FUNCTION_NAME   reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)
    $end            reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)
    RETURN          reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)
    RKEY            reduce using rule 21 (print -> ECHO argumentos SEMICOLON .)


state 46

    (16) asignacion -> VARIABLE ASSIGN expresion . SEMICOLON

    SEMICOLON       shift and go to state 76


state 47

    (25) expresion -> argumentos .

    SEMICOLON       reduce using rule 25 (expresion -> argumentos .)


state 48

    (26) expresion -> invocar .

    SEMICOLON       reduce using rule 26 (expresion -> invocar .)


state 49

    (27) expresion -> operacionAritmetica .

    SEMICOLON       reduce using rule 27 (expresion -> operacionAritmetica .)


state 50

    (28) expresion -> operacionRelacional .
    (49) operacionLogica -> operacionRelacional . operadorLogico operacionRelacional
    (50) operacionLogica -> operacionRelacional . operadorLogico operacionLogica
    (62) operadorLogico -> . LOGICAL_AND
    (63) operadorLogico -> . LOGICAL_OR
    (64) operadorLogico -> . LOGICAL_NOT

    SEMICOLON       reduce using rule 28 (expresion -> operacionRelacional .)
    LOGICAL_AND     shift and go to state 62
    LOGICAL_OR      shift and go to state 63
    LOGICAL_NOT     shift and go to state 64

    operadorLogico                 shift and go to state 77

state 51

    (29) expresion -> readline .

    SEMICOLON       reduce using rule 29 (expresion -> readline .)


state 52

    (30) expresion -> arregloIndexado .

    SEMICOLON       reduce using rule 30 (expresion -> arregloIndexado .)


state 53

    (31) expresion -> arregloDeclarado .

    SEMICOLON       reduce using rule 31 (expresion -> arregloDeclarado .)


state 54

    (32) expresion -> operacionLogica .

    SEMICOLON       reduce using rule 32 (expresion -> operacionLogica .)


state 55

    (33) expresion -> operadorLogico .

    SEMICOLON       reduce using rule 33 (expresion -> operadorLogico .)


state 56

    (34) argumentos -> datos . COMMA argumentos
    (35) argumentos -> datos .
    (54) operacionRelacionalGeneral -> datos . operadorRelacionalGeneral datos
    (55) operacionRelacionalNumerica -> datos . operadorRelacionalNumerico d_numericos
    (56) operacionRelacionalNumerica -> datos . operadorRelacionalNumerico error
    (65) operadorRelacionalGeneral -> . EQUALS
    (66) operadorRelacionalGeneral -> . DIFFERENT
    (67) operadorRelacionalNumerico -> . GREATER
    (68) operadorRelacionalNumerico -> . LESS
    (69) operadorRelacionalNumerico -> . GREATER_EQUALS
    (70) operadorRelacionalNumerico -> . LESS_EQUALS

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 35 (argumentos -> datos .)
    EQUALS          shift and go to state 80
    DIFFERENT       shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    GREATER_EQUALS  shift and go to state 84
    LESS_EQUALS     shift and go to state 85

    operadorRelacionalGeneral      shift and go to state 78
    operadorRelacionalNumerico     shift and go to state 79

state 57

    (44) operacionAritmetica -> d_numericos . operadorAritmetico d_numericos
    (45) operacionAritmetica -> d_numericos . operadorAritmetico operacionAritmetica
    (46) operacionAritmetica -> d_numericos . operadorAritmetico error
    (38) datos -> d_numericos .
    (57) operadorAritmetico -> . PLUS
    (58) operadorAritmetico -> . MINUS
    (59) operadorAritmetico -> . TIMES
    (60) operadorAritmetico -> . DIVIDE
    (61) operadorAritmetico -> . MOD

    COMMA           reduce using rule 38 (datos -> d_numericos .)
    EQUALS          reduce using rule 38 (datos -> d_numericos .)
    DIFFERENT       reduce using rule 38 (datos -> d_numericos .)
    GREATER         reduce using rule 38 (datos -> d_numericos .)
    LESS            reduce using rule 38 (datos -> d_numericos .)
    GREATER_EQUALS  reduce using rule 38 (datos -> d_numericos .)
    LESS_EQUALS     reduce using rule 38 (datos -> d_numericos .)
    SEMICOLON       reduce using rule 38 (datos -> d_numericos .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    operadorAritmetico             shift and go to state 86

state 58

    (52) operacionRelacional -> operacionRelacionalGeneral .

    LOGICAL_AND     reduce using rule 52 (operacionRelacional -> operacionRelacionalGeneral .)
    LOGICAL_OR      reduce using rule 52 (operacionRelacional -> operacionRelacionalGeneral .)
    LOGICAL_NOT     reduce using rule 52 (operacionRelacional -> operacionRelacionalGeneral .)
    SEMICOLON       reduce using rule 52 (operacionRelacional -> operacionRelacionalGeneral .)
    RPAREN          reduce using rule 52 (operacionRelacional -> operacionRelacionalGeneral .)


state 59

    (53) operacionRelacional -> operacionRelacionalNumerica .

    LOGICAL_AND     reduce using rule 53 (operacionRelacional -> operacionRelacionalNumerica .)
    LOGICAL_OR      reduce using rule 53 (operacionRelacional -> operacionRelacionalNumerica .)
    LOGICAL_NOT     reduce using rule 53 (operacionRelacional -> operacionRelacionalNumerica .)
    SEMICOLON       reduce using rule 53 (operacionRelacional -> operacionRelacionalNumerica .)
    RPAREN          reduce using rule 53 (operacionRelacional -> operacionRelacionalNumerica .)


state 60

    (90) readline -> READLINE . LPAREN RPAREN

    LPAREN          shift and go to state 92


state 61

    (74) arregloIndexado -> LCOR . datos_comma RCOR
    (71) arregloDeclarado -> LCOR . NEWLINE cuerpoArregloDeclarado NEWLINE RCOR
    (85) datos_comma -> . datos
    (86) datos_comma -> . datos COMMA datos_comma
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    NEWLINE         shift and go to state 94
    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    datos_comma                    shift and go to state 93
    datos                          shift and go to state 70
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 62

    (62) operadorLogico -> LOGICAL_AND .

    SEMICOLON       reduce using rule 62 (operadorLogico -> LOGICAL_AND .)
    VARIABLE        reduce using rule 62 (operadorLogico -> LOGICAL_AND .)
    STRING          reduce using rule 62 (operadorLogico -> LOGICAL_AND .)
    NUMBER          reduce using rule 62 (operadorLogico -> LOGICAL_AND .)
    FLOAT           reduce using rule 62 (operadorLogico -> LOGICAL_AND .)
    BOOLEAN         reduce using rule 62 (operadorLogico -> LOGICAL_AND .)


state 63

    (63) operadorLogico -> LOGICAL_OR .

    SEMICOLON       reduce using rule 63 (operadorLogico -> LOGICAL_OR .)
    VARIABLE        reduce using rule 63 (operadorLogico -> LOGICAL_OR .)
    STRING          reduce using rule 63 (operadorLogico -> LOGICAL_OR .)
    NUMBER          reduce using rule 63 (operadorLogico -> LOGICAL_OR .)
    FLOAT           reduce using rule 63 (operadorLogico -> LOGICAL_OR .)
    BOOLEAN         reduce using rule 63 (operadorLogico -> LOGICAL_OR .)


state 64

    (64) operadorLogico -> LOGICAL_NOT .

    SEMICOLON       reduce using rule 64 (operadorLogico -> LOGICAL_NOT .)
    VARIABLE        reduce using rule 64 (operadorLogico -> LOGICAL_NOT .)
    STRING          reduce using rule 64 (operadorLogico -> LOGICAL_NOT .)
    NUMBER          reduce using rule 64 (operadorLogico -> LOGICAL_NOT .)
    FLOAT           reduce using rule 64 (operadorLogico -> LOGICAL_NOT .)
    BOOLEAN         reduce using rule 64 (operadorLogico -> LOGICAL_NOT .)


state 65

    (17) variable -> VARIABLE ASSIGN_ADD d_numericos .

    NEWLINE         reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)
    COMMENT1        reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)
    ECHO            reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)
    VARIABLE        reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)
    FUNCTION        reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)
    IF              reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)
    FOR             reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)
    FUNCTION_NAME   reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)
    $end            reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)
    RETURN          reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)
    RKEY            reduce using rule 17 (variable -> VARIABLE ASSIGN_ADD d_numericos .)


state 66

    (18) variable -> VARIABLE ASSIGN_SUB d_numericos .

    NEWLINE         reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)
    COMMENT1        reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)
    ECHO            reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)
    VARIABLE        reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)
    FUNCTION        reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)
    IF              reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)
    FOR             reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)
    FUNCTION_NAME   reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)
    $end            reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)
    RETURN          reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)
    RKEY            reduce using rule 18 (variable -> VARIABLE ASSIGN_SUB d_numericos .)


state 67

    (75) funcion -> FUNCTION FUNCTION_NAME LPAREN . argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> FUNCTION FUNCTION_NAME LPAREN . RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (79) argumentosFuncion -> . argumentoFuncion
    (80) argumentosFuncion -> . argumentoFuncion argumentosFuncion
    (81) argumentoFuncion -> . d_numericos
    (82) argumentoFuncion -> . d_strings
    (83) argumentoFuncion -> . d_booleanos
    (84) argumentoFuncion -> . VARIABLE
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (42) d_strings -> . STRING
    (43) d_booleanos -> . BOOLEAN

    RPAREN          shift and go to state 96
    VARIABLE        shift and go to state 101
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 34

    argumentosFuncion              shift and go to state 95
    argumentoFuncion               shift and go to state 97
    d_numericos                    shift and go to state 98
    d_strings                      shift and go to state 99
    d_booleanos                    shift and go to state 100

state 68

    (77) invocar -> FUNCTION_NAME LPAREN datos_comma . RPAREN SEMICOLON

    RPAREN          shift and go to state 102


state 69

    (78) invocar -> FUNCTION_NAME LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 103


state 70

    (85) datos_comma -> datos .
    (86) datos_comma -> datos . COMMA datos_comma

    RPAREN          reduce using rule 85 (datos_comma -> datos .)
    RCOR            reduce using rule 85 (datos_comma -> datos .)
    COMMA           shift and go to state 104


state 71

    (22) if -> IF LPAREN operacionRelacional . RPAREN LKEY NEWLINE programa RKEY
    (23) if -> IF LPAREN operacionRelacional . RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE

    RPAREN          shift and go to state 105


state 72

    (54) operacionRelacionalGeneral -> datos . operadorRelacionalGeneral datos
    (55) operacionRelacionalNumerica -> datos . operadorRelacionalNumerico d_numericos
    (56) operacionRelacionalNumerica -> datos . operadorRelacionalNumerico error
    (65) operadorRelacionalGeneral -> . EQUALS
    (66) operadorRelacionalGeneral -> . DIFFERENT
    (67) operadorRelacionalNumerico -> . GREATER
    (68) operadorRelacionalNumerico -> . LESS
    (69) operadorRelacionalNumerico -> . GREATER_EQUALS
    (70) operadorRelacionalNumerico -> . LESS_EQUALS

    EQUALS          shift and go to state 80
    DIFFERENT       shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    GREATER_EQUALS  shift and go to state 84
    LESS_EQUALS     shift and go to state 85

    operadorRelacionalGeneral      shift and go to state 78
    operadorRelacionalNumerico     shift and go to state 79

state 73

    (24) for -> FOR LPAREN VARIABLE . ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE

    ASSIGN          shift and go to state 106


state 74

    (34) argumentos -> datos . COMMA argumentos
    (35) argumentos -> datos .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 35 (argumentos -> datos .)


state 75

    (34) argumentos -> datos COMMA argumentos .

    SEMICOLON       reduce using rule 34 (argumentos -> datos COMMA argumentos .)


state 76

    (16) asignacion -> VARIABLE ASSIGN expresion SEMICOLON .

    NEWLINE         reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)
    COMMENT1        reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)
    ECHO            reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)
    VARIABLE        reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)
    FUNCTION        reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)
    IF              reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)
    FOR             reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)
    FUNCTION_NAME   reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)
    $end            reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)
    RETURN          reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)
    RKEY            reduce using rule 16 (asignacion -> VARIABLE ASSIGN expresion SEMICOLON .)


state 77

    (49) operacionLogica -> operacionRelacional operadorLogico . operacionRelacional
    (50) operacionLogica -> operacionRelacional operadorLogico . operacionLogica
    (52) operacionRelacional -> . operacionRelacionalGeneral
    (53) operacionRelacional -> . operacionRelacionalNumerica
    (49) operacionLogica -> . operacionRelacional operadorLogico operacionRelacional
    (50) operacionLogica -> . operacionRelacional operadorLogico operacionLogica
    (51) operacionLogica -> .
    (54) operacionRelacionalGeneral -> . datos operadorRelacionalGeneral datos
    (55) operacionRelacionalNumerica -> . datos operadorRelacionalNumerico d_numericos
    (56) operacionRelacionalNumerica -> . datos operadorRelacionalNumerico error
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    SEMICOLON       reduce using rule 51 (operacionLogica -> .)
    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    operacionRelacional            shift and go to state 107
    operacionLogica                shift and go to state 108
    operacionRelacionalGeneral     shift and go to state 58
    operacionRelacionalNumerica    shift and go to state 59
    datos                          shift and go to state 72
    d_numericos                    shift and go to state 29
    d_strings                      shift and go to state 28
    d_booleanos                    shift and go to state 30

state 78

    (54) operacionRelacionalGeneral -> datos operadorRelacionalGeneral . datos
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    datos                          shift and go to state 109
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 79

    (55) operacionRelacionalNumerica -> datos operadorRelacionalNumerico . d_numericos
    (56) operacionRelacionalNumerica -> datos operadorRelacionalNumerico . error
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT

    error           shift and go to state 111
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33

    d_numericos                    shift and go to state 110

state 80

    (65) operadorRelacionalGeneral -> EQUALS .

    VARIABLE        reduce using rule 65 (operadorRelacionalGeneral -> EQUALS .)
    STRING          reduce using rule 65 (operadorRelacionalGeneral -> EQUALS .)
    NUMBER          reduce using rule 65 (operadorRelacionalGeneral -> EQUALS .)
    FLOAT           reduce using rule 65 (operadorRelacionalGeneral -> EQUALS .)
    BOOLEAN         reduce using rule 65 (operadorRelacionalGeneral -> EQUALS .)


state 81

    (66) operadorRelacionalGeneral -> DIFFERENT .

    VARIABLE        reduce using rule 66 (operadorRelacionalGeneral -> DIFFERENT .)
    STRING          reduce using rule 66 (operadorRelacionalGeneral -> DIFFERENT .)
    NUMBER          reduce using rule 66 (operadorRelacionalGeneral -> DIFFERENT .)
    FLOAT           reduce using rule 66 (operadorRelacionalGeneral -> DIFFERENT .)
    BOOLEAN         reduce using rule 66 (operadorRelacionalGeneral -> DIFFERENT .)


state 82

    (67) operadorRelacionalNumerico -> GREATER .

    error           reduce using rule 67 (operadorRelacionalNumerico -> GREATER .)
    NUMBER          reduce using rule 67 (operadorRelacionalNumerico -> GREATER .)
    FLOAT           reduce using rule 67 (operadorRelacionalNumerico -> GREATER .)
    VARIABLE        reduce using rule 67 (operadorRelacionalNumerico -> GREATER .)
    STRING          reduce using rule 67 (operadorRelacionalNumerico -> GREATER .)
    BOOLEAN         reduce using rule 67 (operadorRelacionalNumerico -> GREATER .)


state 83

    (68) operadorRelacionalNumerico -> LESS .

    error           reduce using rule 68 (operadorRelacionalNumerico -> LESS .)
    NUMBER          reduce using rule 68 (operadorRelacionalNumerico -> LESS .)
    FLOAT           reduce using rule 68 (operadorRelacionalNumerico -> LESS .)
    VARIABLE        reduce using rule 68 (operadorRelacionalNumerico -> LESS .)
    STRING          reduce using rule 68 (operadorRelacionalNumerico -> LESS .)
    BOOLEAN         reduce using rule 68 (operadorRelacionalNumerico -> LESS .)


state 84

    (69) operadorRelacionalNumerico -> GREATER_EQUALS .

    error           reduce using rule 69 (operadorRelacionalNumerico -> GREATER_EQUALS .)
    NUMBER          reduce using rule 69 (operadorRelacionalNumerico -> GREATER_EQUALS .)
    FLOAT           reduce using rule 69 (operadorRelacionalNumerico -> GREATER_EQUALS .)
    VARIABLE        reduce using rule 69 (operadorRelacionalNumerico -> GREATER_EQUALS .)
    STRING          reduce using rule 69 (operadorRelacionalNumerico -> GREATER_EQUALS .)
    BOOLEAN         reduce using rule 69 (operadorRelacionalNumerico -> GREATER_EQUALS .)


state 85

    (70) operadorRelacionalNumerico -> LESS_EQUALS .

    error           reduce using rule 70 (operadorRelacionalNumerico -> LESS_EQUALS .)
    NUMBER          reduce using rule 70 (operadorRelacionalNumerico -> LESS_EQUALS .)
    FLOAT           reduce using rule 70 (operadorRelacionalNumerico -> LESS_EQUALS .)
    VARIABLE        reduce using rule 70 (operadorRelacionalNumerico -> LESS_EQUALS .)
    STRING          reduce using rule 70 (operadorRelacionalNumerico -> LESS_EQUALS .)
    BOOLEAN         reduce using rule 70 (operadorRelacionalNumerico -> LESS_EQUALS .)


state 86

    (44) operacionAritmetica -> d_numericos operadorAritmetico . d_numericos
    (45) operacionAritmetica -> d_numericos operadorAritmetico . operacionAritmetica
    (46) operacionAritmetica -> d_numericos operadorAritmetico . error
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (44) operacionAritmetica -> . d_numericos operadorAritmetico d_numericos
    (45) operacionAritmetica -> . d_numericos operadorAritmetico operacionAritmetica
    (46) operacionAritmetica -> . d_numericos operadorAritmetico error

    error           shift and go to state 114
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33

    d_numericos                    shift and go to state 112
    operacionAritmetica            shift and go to state 113

state 87

    (57) operadorAritmetico -> PLUS .

    error           reduce using rule 57 (operadorAritmetico -> PLUS .)
    NUMBER          reduce using rule 57 (operadorAritmetico -> PLUS .)
    FLOAT           reduce using rule 57 (operadorAritmetico -> PLUS .)


state 88

    (58) operadorAritmetico -> MINUS .

    error           reduce using rule 58 (operadorAritmetico -> MINUS .)
    NUMBER          reduce using rule 58 (operadorAritmetico -> MINUS .)
    FLOAT           reduce using rule 58 (operadorAritmetico -> MINUS .)


state 89

    (59) operadorAritmetico -> TIMES .

    error           reduce using rule 59 (operadorAritmetico -> TIMES .)
    NUMBER          reduce using rule 59 (operadorAritmetico -> TIMES .)
    FLOAT           reduce using rule 59 (operadorAritmetico -> TIMES .)


state 90

    (60) operadorAritmetico -> DIVIDE .

    error           reduce using rule 60 (operadorAritmetico -> DIVIDE .)
    NUMBER          reduce using rule 60 (operadorAritmetico -> DIVIDE .)
    FLOAT           reduce using rule 60 (operadorAritmetico -> DIVIDE .)


state 91

    (61) operadorAritmetico -> MOD .

    error           reduce using rule 61 (operadorAritmetico -> MOD .)
    NUMBER          reduce using rule 61 (operadorAritmetico -> MOD .)
    FLOAT           reduce using rule 61 (operadorAritmetico -> MOD .)


state 92

    (90) readline -> READLINE LPAREN . RPAREN

    RPAREN          shift and go to state 115


state 93

    (74) arregloIndexado -> LCOR datos_comma . RCOR

    RCOR            shift and go to state 116


state 94

    (71) arregloDeclarado -> LCOR NEWLINE . cuerpoArregloDeclarado NEWLINE RCOR
    (72) cuerpoArregloDeclarado -> . datos ASSIGNATION datos
    (73) cuerpoArregloDeclarado -> . datos ASSIGNATION datos COMMA NEWLINE cuerpoArregloDeclarado
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    cuerpoArregloDeclarado         shift and go to state 117
    datos                          shift and go to state 118
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 95

    (75) funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion . RPAREN LKEY NEWLINE cuerpoFuncion RKEY

    RPAREN          shift and go to state 119


state 96

    (76) funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN . LKEY NEWLINE cuerpoFuncion RKEY

    LKEY            shift and go to state 120


state 97

    (79) argumentosFuncion -> argumentoFuncion .
    (80) argumentosFuncion -> argumentoFuncion . argumentosFuncion
    (79) argumentosFuncion -> . argumentoFuncion
    (80) argumentosFuncion -> . argumentoFuncion argumentosFuncion
    (81) argumentoFuncion -> . d_numericos
    (82) argumentoFuncion -> . d_strings
    (83) argumentoFuncion -> . d_booleanos
    (84) argumentoFuncion -> . VARIABLE
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (42) d_strings -> . STRING
    (43) d_booleanos -> . BOOLEAN

    RPAREN          reduce using rule 79 (argumentosFuncion -> argumentoFuncion .)
    VARIABLE        shift and go to state 101
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 34

    argumentoFuncion               shift and go to state 97
    argumentosFuncion              shift and go to state 121
    d_numericos                    shift and go to state 98
    d_strings                      shift and go to state 99
    d_booleanos                    shift and go to state 100

state 98

    (81) argumentoFuncion -> d_numericos .

    VARIABLE        reduce using rule 81 (argumentoFuncion -> d_numericos .)
    NUMBER          reduce using rule 81 (argumentoFuncion -> d_numericos .)
    FLOAT           reduce using rule 81 (argumentoFuncion -> d_numericos .)
    STRING          reduce using rule 81 (argumentoFuncion -> d_numericos .)
    BOOLEAN         reduce using rule 81 (argumentoFuncion -> d_numericos .)
    RPAREN          reduce using rule 81 (argumentoFuncion -> d_numericos .)


state 99

    (82) argumentoFuncion -> d_strings .

    VARIABLE        reduce using rule 82 (argumentoFuncion -> d_strings .)
    NUMBER          reduce using rule 82 (argumentoFuncion -> d_strings .)
    FLOAT           reduce using rule 82 (argumentoFuncion -> d_strings .)
    STRING          reduce using rule 82 (argumentoFuncion -> d_strings .)
    BOOLEAN         reduce using rule 82 (argumentoFuncion -> d_strings .)
    RPAREN          reduce using rule 82 (argumentoFuncion -> d_strings .)


state 100

    (83) argumentoFuncion -> d_booleanos .

    VARIABLE        reduce using rule 83 (argumentoFuncion -> d_booleanos .)
    NUMBER          reduce using rule 83 (argumentoFuncion -> d_booleanos .)
    FLOAT           reduce using rule 83 (argumentoFuncion -> d_booleanos .)
    STRING          reduce using rule 83 (argumentoFuncion -> d_booleanos .)
    BOOLEAN         reduce using rule 83 (argumentoFuncion -> d_booleanos .)
    RPAREN          reduce using rule 83 (argumentoFuncion -> d_booleanos .)


state 101

    (84) argumentoFuncion -> VARIABLE .

    VARIABLE        reduce using rule 84 (argumentoFuncion -> VARIABLE .)
    NUMBER          reduce using rule 84 (argumentoFuncion -> VARIABLE .)
    FLOAT           reduce using rule 84 (argumentoFuncion -> VARIABLE .)
    STRING          reduce using rule 84 (argumentoFuncion -> VARIABLE .)
    BOOLEAN         reduce using rule 84 (argumentoFuncion -> VARIABLE .)
    RPAREN          reduce using rule 84 (argumentoFuncion -> VARIABLE .)


state 102

    (77) invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 122


state 103

    (78) invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .

    NEWLINE         reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    COMMENT1        reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    RKEY            reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 78 (invocar -> FUNCTION_NAME LPAREN RPAREN SEMICOLON .)


state 104

    (86) datos_comma -> datos COMMA . datos_comma
    (85) datos_comma -> . datos
    (86) datos_comma -> . datos COMMA datos_comma
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    datos                          shift and go to state 70
    datos_comma                    shift and go to state 123
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 105

    (22) if -> IF LPAREN operacionRelacional RPAREN . LKEY NEWLINE programa RKEY
    (23) if -> IF LPAREN operacionRelacional RPAREN . LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE

    LKEY            shift and go to state 124


state 106

    (24) for -> FOR LPAREN VARIABLE ASSIGN . datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    datos                          shift and go to state 125
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 107

    (49) operacionLogica -> operacionRelacional operadorLogico operacionRelacional .
    (49) operacionLogica -> operacionRelacional . operadorLogico operacionRelacional
    (50) operacionLogica -> operacionRelacional . operadorLogico operacionLogica
    (62) operadorLogico -> . LOGICAL_AND
    (63) operadorLogico -> . LOGICAL_OR
    (64) operadorLogico -> . LOGICAL_NOT

    SEMICOLON       reduce using rule 49 (operacionLogica -> operacionRelacional operadorLogico operacionRelacional .)
    LOGICAL_AND     shift and go to state 62
    LOGICAL_OR      shift and go to state 63
    LOGICAL_NOT     shift and go to state 64

    operadorLogico                 shift and go to state 77

state 108

    (50) operacionLogica -> operacionRelacional operadorLogico operacionLogica .

    SEMICOLON       reduce using rule 50 (operacionLogica -> operacionRelacional operadorLogico operacionLogica .)


state 109

    (54) operacionRelacionalGeneral -> datos operadorRelacionalGeneral datos .

    LOGICAL_AND     reduce using rule 54 (operacionRelacionalGeneral -> datos operadorRelacionalGeneral datos .)
    LOGICAL_OR      reduce using rule 54 (operacionRelacionalGeneral -> datos operadorRelacionalGeneral datos .)
    LOGICAL_NOT     reduce using rule 54 (operacionRelacionalGeneral -> datos operadorRelacionalGeneral datos .)
    SEMICOLON       reduce using rule 54 (operacionRelacionalGeneral -> datos operadorRelacionalGeneral datos .)
    RPAREN          reduce using rule 54 (operacionRelacionalGeneral -> datos operadorRelacionalGeneral datos .)


state 110

    (55) operacionRelacionalNumerica -> datos operadorRelacionalNumerico d_numericos .

    LOGICAL_AND     reduce using rule 55 (operacionRelacionalNumerica -> datos operadorRelacionalNumerico d_numericos .)
    LOGICAL_OR      reduce using rule 55 (operacionRelacionalNumerica -> datos operadorRelacionalNumerico d_numericos .)
    LOGICAL_NOT     reduce using rule 55 (operacionRelacionalNumerica -> datos operadorRelacionalNumerico d_numericos .)
    SEMICOLON       reduce using rule 55 (operacionRelacionalNumerica -> datos operadorRelacionalNumerico d_numericos .)
    RPAREN          reduce using rule 55 (operacionRelacionalNumerica -> datos operadorRelacionalNumerico d_numericos .)


state 111

    (56) operacionRelacionalNumerica -> datos operadorRelacionalNumerico error .

    LOGICAL_AND     reduce using rule 56 (operacionRelacionalNumerica -> datos operadorRelacionalNumerico error .)
    LOGICAL_OR      reduce using rule 56 (operacionRelacionalNumerica -> datos operadorRelacionalNumerico error .)
    LOGICAL_NOT     reduce using rule 56 (operacionRelacionalNumerica -> datos operadorRelacionalNumerico error .)
    SEMICOLON       reduce using rule 56 (operacionRelacionalNumerica -> datos operadorRelacionalNumerico error .)
    RPAREN          reduce using rule 56 (operacionRelacionalNumerica -> datos operadorRelacionalNumerico error .)


state 112

    (44) operacionAritmetica -> d_numericos operadorAritmetico d_numericos .
    (44) operacionAritmetica -> d_numericos . operadorAritmetico d_numericos
    (45) operacionAritmetica -> d_numericos . operadorAritmetico operacionAritmetica
    (46) operacionAritmetica -> d_numericos . operadorAritmetico error
    (57) operadorAritmetico -> . PLUS
    (58) operadorAritmetico -> . MINUS
    (59) operadorAritmetico -> . TIMES
    (60) operadorAritmetico -> . DIVIDE
    (61) operadorAritmetico -> . MOD

    SEMICOLON       reduce using rule 44 (operacionAritmetica -> d_numericos operadorAritmetico d_numericos .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    MOD             shift and go to state 91

    operadorAritmetico             shift and go to state 86

state 113

    (45) operacionAritmetica -> d_numericos operadorAritmetico operacionAritmetica .

    SEMICOLON       reduce using rule 45 (operacionAritmetica -> d_numericos operadorAritmetico operacionAritmetica .)


state 114

    (46) operacionAritmetica -> d_numericos operadorAritmetico error .

    SEMICOLON       reduce using rule 46 (operacionAritmetica -> d_numericos operadorAritmetico error .)


state 115

    (90) readline -> READLINE LPAREN RPAREN .

    SEMICOLON       reduce using rule 90 (readline -> READLINE LPAREN RPAREN .)


state 116

    (74) arregloIndexado -> LCOR datos_comma RCOR .

    SEMICOLON       reduce using rule 74 (arregloIndexado -> LCOR datos_comma RCOR .)


state 117

    (71) arregloDeclarado -> LCOR NEWLINE cuerpoArregloDeclarado . NEWLINE RCOR

    NEWLINE         shift and go to state 126


state 118

    (72) cuerpoArregloDeclarado -> datos . ASSIGNATION datos
    (73) cuerpoArregloDeclarado -> datos . ASSIGNATION datos COMMA NEWLINE cuerpoArregloDeclarado

    ASSIGNATION     shift and go to state 127


state 119

    (75) funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN . LKEY NEWLINE cuerpoFuncion RKEY

    LKEY            shift and go to state 128


state 120

    (76) funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY . NEWLINE cuerpoFuncion RKEY

    NEWLINE         shift and go to state 129


state 121

    (80) argumentosFuncion -> argumentoFuncion argumentosFuncion .

    RPAREN          reduce using rule 80 (argumentosFuncion -> argumentoFuncion argumentosFuncion .)


state 122

    (77) invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .

    NEWLINE         reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    COMMENT1        reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    ECHO            reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    IF              reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    FOR             reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    FUNCTION_NAME   reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    $end            reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    RETURN          reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    RKEY            reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 77 (invocar -> FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON .)


state 123

    (86) datos_comma -> datos COMMA datos_comma .

    RPAREN          reduce using rule 86 (datos_comma -> datos COMMA datos_comma .)
    RCOR            reduce using rule 86 (datos_comma -> datos COMMA datos_comma .)


state 124

    (22) if -> IF LPAREN operacionRelacional RPAREN LKEY . NEWLINE programa RKEY
    (23) if -> IF LPAREN operacionRelacional RPAREN LKEY . NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE

    NEWLINE         shift and go to state 130


state 125

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos . SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE

    SEMICOLON       shift and go to state 131


state 126

    (71) arregloDeclarado -> LCOR NEWLINE cuerpoArregloDeclarado NEWLINE . RCOR

    RCOR            shift and go to state 132


state 127

    (72) cuerpoArregloDeclarado -> datos ASSIGNATION . datos
    (73) cuerpoArregloDeclarado -> datos ASSIGNATION . datos COMMA NEWLINE cuerpoArregloDeclarado
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    datos                          shift and go to state 133
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 128

    (75) funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY . NEWLINE cuerpoFuncion RKEY

    NEWLINE         shift and go to state 134


state 129

    (76) funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE . cuerpoFuncion RKEY
    (87) cuerpoFuncion -> . programa RETURN expresion SEMICOLON NEWLINE
    (88) cuerpoFuncion -> . programa
    (89) cuerpoFuncion -> . RETURN expresion SEMICOLON NEWLINE
    (1) programa -> . bloque
    (2) programa -> . bloque programa
    (3) programa -> . comment bloque programa
    (6) bloque -> . sentencia NEWLINE
    (7) bloque -> . sentencia
    (8) bloque -> . NEWLINE
    (4) comment -> . COMMENT1
    (5) comment -> . COMMENT1 NEWLINE
    (9) sentencia -> . print
    (10) sentencia -> . asignacion
    (11) sentencia -> . variable
    (12) sentencia -> . funcion
    (13) sentencia -> . if
    (14) sentencia -> . for
    (15) sentencia -> . invocar
    (19) print -> . ECHO datos SEMICOLON
    (20) print -> . ECHO SEMICOLON
    (21) print -> . ECHO argumentos SEMICOLON
    (16) asignacion -> . VARIABLE ASSIGN expresion SEMICOLON
    (17) variable -> . VARIABLE ASSIGN_ADD d_numericos
    (18) variable -> . VARIABLE ASSIGN_SUB d_numericos
    (75) funcion -> . FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> . FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (22) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (24) for -> . FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON

    RETURN          shift and go to state 137
    NEWLINE         shift and go to state 5
    COMMENT1        shift and go to state 6
    ECHO            shift and go to state 14
    VARIABLE        shift and go to state 15
    FUNCTION        shift and go to state 16
    IF              shift and go to state 18
    FOR             shift and go to state 19
    FUNCTION_NAME   shift and go to state 17

    cuerpoFuncion                  shift and go to state 135
    programa                       shift and go to state 136
    bloque                         shift and go to state 2
    comment                        shift and go to state 3
    sentencia                      shift and go to state 4
    print                          shift and go to state 7
    asignacion                     shift and go to state 8
    variable                       shift and go to state 9
    funcion                        shift and go to state 10
    if                             shift and go to state 11
    for                            shift and go to state 12
    invocar                        shift and go to state 13

state 130

    (22) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE . programa RKEY
    (23) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE . programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (1) programa -> . bloque
    (2) programa -> . bloque programa
    (3) programa -> . comment bloque programa
    (6) bloque -> . sentencia NEWLINE
    (7) bloque -> . sentencia
    (8) bloque -> . NEWLINE
    (4) comment -> . COMMENT1
    (5) comment -> . COMMENT1 NEWLINE
    (9) sentencia -> . print
    (10) sentencia -> . asignacion
    (11) sentencia -> . variable
    (12) sentencia -> . funcion
    (13) sentencia -> . if
    (14) sentencia -> . for
    (15) sentencia -> . invocar
    (19) print -> . ECHO datos SEMICOLON
    (20) print -> . ECHO SEMICOLON
    (21) print -> . ECHO argumentos SEMICOLON
    (16) asignacion -> . VARIABLE ASSIGN expresion SEMICOLON
    (17) variable -> . VARIABLE ASSIGN_ADD d_numericos
    (18) variable -> . VARIABLE ASSIGN_SUB d_numericos
    (75) funcion -> . FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> . FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (22) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (24) for -> . FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON

    NEWLINE         shift and go to state 5
    COMMENT1        shift and go to state 6
    ECHO            shift and go to state 14
    VARIABLE        shift and go to state 15
    FUNCTION        shift and go to state 16
    IF              shift and go to state 18
    FOR             shift and go to state 19
    FUNCTION_NAME   shift and go to state 17

    programa                       shift and go to state 138
    bloque                         shift and go to state 2
    comment                        shift and go to state 3
    sentencia                      shift and go to state 4
    print                          shift and go to state 7
    asignacion                     shift and go to state 8
    variable                       shift and go to state 9
    funcion                        shift and go to state 10
    if                             shift and go to state 11
    for                            shift and go to state 12
    invocar                        shift and go to state 13

state 131

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON . VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE

    VARIABLE        shift and go to state 139


state 132

    (71) arregloDeclarado -> LCOR NEWLINE cuerpoArregloDeclarado NEWLINE RCOR .

    SEMICOLON       reduce using rule 71 (arregloDeclarado -> LCOR NEWLINE cuerpoArregloDeclarado NEWLINE RCOR .)


state 133

    (72) cuerpoArregloDeclarado -> datos ASSIGNATION datos .
    (73) cuerpoArregloDeclarado -> datos ASSIGNATION datos . COMMA NEWLINE cuerpoArregloDeclarado

    NEWLINE         reduce using rule 72 (cuerpoArregloDeclarado -> datos ASSIGNATION datos .)
    COMMA           shift and go to state 140


state 134

    (75) funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE . cuerpoFuncion RKEY
    (87) cuerpoFuncion -> . programa RETURN expresion SEMICOLON NEWLINE
    (88) cuerpoFuncion -> . programa
    (89) cuerpoFuncion -> . RETURN expresion SEMICOLON NEWLINE
    (1) programa -> . bloque
    (2) programa -> . bloque programa
    (3) programa -> . comment bloque programa
    (6) bloque -> . sentencia NEWLINE
    (7) bloque -> . sentencia
    (8) bloque -> . NEWLINE
    (4) comment -> . COMMENT1
    (5) comment -> . COMMENT1 NEWLINE
    (9) sentencia -> . print
    (10) sentencia -> . asignacion
    (11) sentencia -> . variable
    (12) sentencia -> . funcion
    (13) sentencia -> . if
    (14) sentencia -> . for
    (15) sentencia -> . invocar
    (19) print -> . ECHO datos SEMICOLON
    (20) print -> . ECHO SEMICOLON
    (21) print -> . ECHO argumentos SEMICOLON
    (16) asignacion -> . VARIABLE ASSIGN expresion SEMICOLON
    (17) variable -> . VARIABLE ASSIGN_ADD d_numericos
    (18) variable -> . VARIABLE ASSIGN_SUB d_numericos
    (75) funcion -> . FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> . FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (22) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (24) for -> . FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON

    RETURN          shift and go to state 137
    NEWLINE         shift and go to state 5
    COMMENT1        shift and go to state 6
    ECHO            shift and go to state 14
    VARIABLE        shift and go to state 15
    FUNCTION        shift and go to state 16
    IF              shift and go to state 18
    FOR             shift and go to state 19
    FUNCTION_NAME   shift and go to state 17

    cuerpoFuncion                  shift and go to state 141
    programa                       shift and go to state 136
    bloque                         shift and go to state 2
    comment                        shift and go to state 3
    sentencia                      shift and go to state 4
    print                          shift and go to state 7
    asignacion                     shift and go to state 8
    variable                       shift and go to state 9
    funcion                        shift and go to state 10
    if                             shift and go to state 11
    for                            shift and go to state 12
    invocar                        shift and go to state 13

state 135

    (76) funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion . RKEY

    RKEY            shift and go to state 142


state 136

    (87) cuerpoFuncion -> programa . RETURN expresion SEMICOLON NEWLINE
    (88) cuerpoFuncion -> programa .

    RETURN          shift and go to state 143
    RKEY            reduce using rule 88 (cuerpoFuncion -> programa .)


state 137

    (89) cuerpoFuncion -> RETURN . expresion SEMICOLON NEWLINE
    (25) expresion -> . argumentos
    (26) expresion -> . invocar
    (27) expresion -> . operacionAritmetica
    (28) expresion -> . operacionRelacional
    (29) expresion -> . readline
    (30) expresion -> . arregloIndexado
    (31) expresion -> . arregloDeclarado
    (32) expresion -> . operacionLogica
    (33) expresion -> . operadorLogico
    (34) argumentos -> . datos COMMA argumentos
    (35) argumentos -> . datos
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON
    (44) operacionAritmetica -> . d_numericos operadorAritmetico d_numericos
    (45) operacionAritmetica -> . d_numericos operadorAritmetico operacionAritmetica
    (46) operacionAritmetica -> . d_numericos operadorAritmetico error
    (52) operacionRelacional -> . operacionRelacionalGeneral
    (53) operacionRelacional -> . operacionRelacionalNumerica
    (90) readline -> . READLINE LPAREN RPAREN
    (74) arregloIndexado -> . LCOR datos_comma RCOR
    (71) arregloDeclarado -> . LCOR NEWLINE cuerpoArregloDeclarado NEWLINE RCOR
    (49) operacionLogica -> . operacionRelacional operadorLogico operacionRelacional
    (50) operacionLogica -> . operacionRelacional operadorLogico operacionLogica
    (51) operacionLogica -> .
    (62) operadorLogico -> . LOGICAL_AND
    (63) operadorLogico -> . LOGICAL_OR
    (64) operadorLogico -> . LOGICAL_NOT
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (54) operacionRelacionalGeneral -> . datos operadorRelacionalGeneral datos
    (55) operacionRelacionalNumerica -> . datos operadorRelacionalNumerico d_numericos
    (56) operacionRelacionalNumerica -> . datos operadorRelacionalNumerico error
    (42) d_strings -> . STRING
    (43) d_booleanos -> . BOOLEAN

    FUNCTION_NAME   shift and go to state 17
    READLINE        shift and go to state 60
    LCOR            shift and go to state 61
    SEMICOLON       reduce using rule 51 (operacionLogica -> .)
    LOGICAL_AND     shift and go to state 62
    LOGICAL_OR      shift and go to state 63
    LOGICAL_NOT     shift and go to state 64
    VARIABLE        shift and go to state 27
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 34

    expresion                      shift and go to state 144
    argumentos                     shift and go to state 47
    invocar                        shift and go to state 48
    operacionAritmetica            shift and go to state 49
    operacionRelacional            shift and go to state 50
    readline                       shift and go to state 51
    arregloIndexado                shift and go to state 52
    arregloDeclarado               shift and go to state 53
    operacionLogica                shift and go to state 54
    operadorLogico                 shift and go to state 55
    datos                          shift and go to state 56
    d_numericos                    shift and go to state 57
    operacionRelacionalGeneral     shift and go to state 58
    operacionRelacionalNumerica    shift and go to state 59
    d_strings                      shift and go to state 28
    d_booleanos                    shift and go to state 30

state 138

    (22) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa . RKEY
    (23) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa . RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE

    RKEY            shift and go to state 145


state 139

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE . operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (67) operadorRelacionalNumerico -> . GREATER
    (68) operadorRelacionalNumerico -> . LESS
    (69) operadorRelacionalNumerico -> . GREATER_EQUALS
    (70) operadorRelacionalNumerico -> . LESS_EQUALS

    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    GREATER_EQUALS  shift and go to state 84
    LESS_EQUALS     shift and go to state 85

    operadorRelacionalNumerico     shift and go to state 146

state 140

    (73) cuerpoArregloDeclarado -> datos ASSIGNATION datos COMMA . NEWLINE cuerpoArregloDeclarado

    NEWLINE         shift and go to state 147


state 141

    (75) funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion . RKEY

    RKEY            shift and go to state 148


state 142

    (76) funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .

    NEWLINE         reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    COMMENT1        reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    ECHO            reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    VARIABLE        reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    FUNCTION        reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    IF              reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    FOR             reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    FUNCTION_NAME   reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    $end            reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    RETURN          reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    RKEY            reduce using rule 76 (funcion -> FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)


state 143

    (87) cuerpoFuncion -> programa RETURN . expresion SEMICOLON NEWLINE
    (25) expresion -> . argumentos
    (26) expresion -> . invocar
    (27) expresion -> . operacionAritmetica
    (28) expresion -> . operacionRelacional
    (29) expresion -> . readline
    (30) expresion -> . arregloIndexado
    (31) expresion -> . arregloDeclarado
    (32) expresion -> . operacionLogica
    (33) expresion -> . operadorLogico
    (34) argumentos -> . datos COMMA argumentos
    (35) argumentos -> . datos
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON
    (44) operacionAritmetica -> . d_numericos operadorAritmetico d_numericos
    (45) operacionAritmetica -> . d_numericos operadorAritmetico operacionAritmetica
    (46) operacionAritmetica -> . d_numericos operadorAritmetico error
    (52) operacionRelacional -> . operacionRelacionalGeneral
    (53) operacionRelacional -> . operacionRelacionalNumerica
    (90) readline -> . READLINE LPAREN RPAREN
    (74) arregloIndexado -> . LCOR datos_comma RCOR
    (71) arregloDeclarado -> . LCOR NEWLINE cuerpoArregloDeclarado NEWLINE RCOR
    (49) operacionLogica -> . operacionRelacional operadorLogico operacionRelacional
    (50) operacionLogica -> . operacionRelacional operadorLogico operacionLogica
    (51) operacionLogica -> .
    (62) operadorLogico -> . LOGICAL_AND
    (63) operadorLogico -> . LOGICAL_OR
    (64) operadorLogico -> . LOGICAL_NOT
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (54) operacionRelacionalGeneral -> . datos operadorRelacionalGeneral datos
    (55) operacionRelacionalNumerica -> . datos operadorRelacionalNumerico d_numericos
    (56) operacionRelacionalNumerica -> . datos operadorRelacionalNumerico error
    (42) d_strings -> . STRING
    (43) d_booleanos -> . BOOLEAN

    FUNCTION_NAME   shift and go to state 17
    READLINE        shift and go to state 60
    LCOR            shift and go to state 61
    SEMICOLON       reduce using rule 51 (operacionLogica -> .)
    LOGICAL_AND     shift and go to state 62
    LOGICAL_OR      shift and go to state 63
    LOGICAL_NOT     shift and go to state 64
    VARIABLE        shift and go to state 27
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 34

    expresion                      shift and go to state 149
    argumentos                     shift and go to state 47
    invocar                        shift and go to state 48
    operacionAritmetica            shift and go to state 49
    operacionRelacional            shift and go to state 50
    readline                       shift and go to state 51
    arregloIndexado                shift and go to state 52
    arregloDeclarado               shift and go to state 53
    operacionLogica                shift and go to state 54
    operadorLogico                 shift and go to state 55
    datos                          shift and go to state 56
    d_numericos                    shift and go to state 57
    operacionRelacionalGeneral     shift and go to state 58
    operacionRelacionalNumerica    shift and go to state 59
    d_strings                      shift and go to state 28
    d_booleanos                    shift and go to state 30

state 144

    (89) cuerpoFuncion -> RETURN expresion . SEMICOLON NEWLINE

    SEMICOLON       shift and go to state 150


state 145

    (22) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .
    (23) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY . ELSE LKEY NEWLINE programa RKEY NEWLINE

    NEWLINE         reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    COMMENT1        reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    ECHO            reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    VARIABLE        reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    FUNCTION        reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    IF              reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    FOR             reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    FUNCTION_NAME   reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    $end            reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    RETURN          reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    RKEY            reduce using rule 22 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY .)
    ELSE            shift and go to state 151


state 146

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico . datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    datos                          shift and go to state 152
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 147

    (73) cuerpoArregloDeclarado -> datos ASSIGNATION datos COMMA NEWLINE . cuerpoArregloDeclarado
    (72) cuerpoArregloDeclarado -> . datos ASSIGNATION datos
    (73) cuerpoArregloDeclarado -> . datos ASSIGNATION datos COMMA NEWLINE cuerpoArregloDeclarado
    (36) datos -> . VARIABLE
    (37) datos -> . d_strings
    (38) datos -> . d_numericos
    (39) datos -> . d_booleanos
    (42) d_strings -> . STRING
    (40) d_numericos -> . NUMBER
    (41) d_numericos -> . FLOAT
    (43) d_booleanos -> . BOOLEAN

    VARIABLE        shift and go to state 27
    STRING          shift and go to state 31
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34

    datos                          shift and go to state 118
    cuerpoArregloDeclarado         shift and go to state 153
    d_strings                      shift and go to state 28
    d_numericos                    shift and go to state 29
    d_booleanos                    shift and go to state 30

state 148

    (75) funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .

    NEWLINE         reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    COMMENT1        reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    ECHO            reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    VARIABLE        reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    FUNCTION        reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    IF              reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    FOR             reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    FUNCTION_NAME   reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    $end            reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    RETURN          reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)
    RKEY            reduce using rule 75 (funcion -> FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY .)


state 149

    (87) cuerpoFuncion -> programa RETURN expresion . SEMICOLON NEWLINE

    SEMICOLON       shift and go to state 154


state 150

    (89) cuerpoFuncion -> RETURN expresion SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 155


state 151

    (23) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE . LKEY NEWLINE programa RKEY NEWLINE

    LKEY            shift and go to state 156


state 152

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos . SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE

    SEMICOLON       shift and go to state 157


state 153

    (73) cuerpoArregloDeclarado -> datos ASSIGNATION datos COMMA NEWLINE cuerpoArregloDeclarado .

    NEWLINE         reduce using rule 73 (cuerpoArregloDeclarado -> datos ASSIGNATION datos COMMA NEWLINE cuerpoArregloDeclarado .)


state 154

    (87) cuerpoFuncion -> programa RETURN expresion SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 158


state 155

    (89) cuerpoFuncion -> RETURN expresion SEMICOLON NEWLINE .

    RKEY            reduce using rule 89 (cuerpoFuncion -> RETURN expresion SEMICOLON NEWLINE .)


state 156

    (23) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY . NEWLINE programa RKEY NEWLINE

    NEWLINE         shift and go to state 159


state 157

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON . operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (47) operacionModificadoras -> . VARIABLE INCREMENT
    (48) operacionModificadoras -> . VARIABLE DECREMENT

    VARIABLE        shift and go to state 160

    operacionModificadoras         shift and go to state 161

state 158

    (87) cuerpoFuncion -> programa RETURN expresion SEMICOLON NEWLINE .

    RKEY            reduce using rule 87 (cuerpoFuncion -> programa RETURN expresion SEMICOLON NEWLINE .)


state 159

    (23) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE . programa RKEY NEWLINE
    (1) programa -> . bloque
    (2) programa -> . bloque programa
    (3) programa -> . comment bloque programa
    (6) bloque -> . sentencia NEWLINE
    (7) bloque -> . sentencia
    (8) bloque -> . NEWLINE
    (4) comment -> . COMMENT1
    (5) comment -> . COMMENT1 NEWLINE
    (9) sentencia -> . print
    (10) sentencia -> . asignacion
    (11) sentencia -> . variable
    (12) sentencia -> . funcion
    (13) sentencia -> . if
    (14) sentencia -> . for
    (15) sentencia -> . invocar
    (19) print -> . ECHO datos SEMICOLON
    (20) print -> . ECHO SEMICOLON
    (21) print -> . ECHO argumentos SEMICOLON
    (16) asignacion -> . VARIABLE ASSIGN expresion SEMICOLON
    (17) variable -> . VARIABLE ASSIGN_ADD d_numericos
    (18) variable -> . VARIABLE ASSIGN_SUB d_numericos
    (75) funcion -> . FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> . FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (22) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (24) for -> . FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON

    NEWLINE         shift and go to state 5
    COMMENT1        shift and go to state 6
    ECHO            shift and go to state 14
    VARIABLE        shift and go to state 15
    FUNCTION        shift and go to state 16
    IF              shift and go to state 18
    FOR             shift and go to state 19
    FUNCTION_NAME   shift and go to state 17

    programa                       shift and go to state 162
    bloque                         shift and go to state 2
    comment                        shift and go to state 3
    sentencia                      shift and go to state 4
    print                          shift and go to state 7
    asignacion                     shift and go to state 8
    variable                       shift and go to state 9
    funcion                        shift and go to state 10
    if                             shift and go to state 11
    for                            shift and go to state 12
    invocar                        shift and go to state 13

state 160

    (47) operacionModificadoras -> VARIABLE . INCREMENT
    (48) operacionModificadoras -> VARIABLE . DECREMENT

    INCREMENT       shift and go to state 163
    DECREMENT       shift and go to state 164


state 161

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras . RPAREN LKEY NEWLINE programa RKEY NEWLINE

    RPAREN          shift and go to state 165


state 162

    (23) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa . RKEY NEWLINE

    RKEY            shift and go to state 166


state 163

    (47) operacionModificadoras -> VARIABLE INCREMENT .

    RPAREN          reduce using rule 47 (operacionModificadoras -> VARIABLE INCREMENT .)


state 164

    (48) operacionModificadoras -> VARIABLE DECREMENT .

    RPAREN          reduce using rule 48 (operacionModificadoras -> VARIABLE DECREMENT .)


state 165

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN . LKEY NEWLINE programa RKEY NEWLINE

    LKEY            shift and go to state 167


state 166

    (23) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY . NEWLINE

    NEWLINE         shift and go to state 168


state 167

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY . NEWLINE programa RKEY NEWLINE

    NEWLINE         shift and go to state 169


state 168

    (23) if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .

    NEWLINE         reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)
    COMMENT1        reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)
    ECHO            reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)
    VARIABLE        reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)
    FUNCTION        reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)
    IF              reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)
    FOR             reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)
    FUNCTION_NAME   reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)
    $end            reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)
    RETURN          reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)
    RKEY            reduce using rule 23 (if -> IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE .)


state 169

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE . programa RKEY NEWLINE
    (1) programa -> . bloque
    (2) programa -> . bloque programa
    (3) programa -> . comment bloque programa
    (6) bloque -> . sentencia NEWLINE
    (7) bloque -> . sentencia
    (8) bloque -> . NEWLINE
    (4) comment -> . COMMENT1
    (5) comment -> . COMMENT1 NEWLINE
    (9) sentencia -> . print
    (10) sentencia -> . asignacion
    (11) sentencia -> . variable
    (12) sentencia -> . funcion
    (13) sentencia -> . if
    (14) sentencia -> . for
    (15) sentencia -> . invocar
    (19) print -> . ECHO datos SEMICOLON
    (20) print -> . ECHO SEMICOLON
    (21) print -> . ECHO argumentos SEMICOLON
    (16) asignacion -> . VARIABLE ASSIGN expresion SEMICOLON
    (17) variable -> . VARIABLE ASSIGN_ADD d_numericos
    (18) variable -> . VARIABLE ASSIGN_SUB d_numericos
    (75) funcion -> . FUNCTION FUNCTION_NAME LPAREN argumentosFuncion RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (76) funcion -> . FUNCTION FUNCTION_NAME LPAREN RPAREN LKEY NEWLINE cuerpoFuncion RKEY
    (22) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY
    (23) if -> . IF LPAREN operacionRelacional RPAREN LKEY NEWLINE programa RKEY ELSE LKEY NEWLINE programa RKEY NEWLINE
    (24) for -> . FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE
    (77) invocar -> . FUNCTION_NAME LPAREN datos_comma RPAREN SEMICOLON
    (78) invocar -> . FUNCTION_NAME LPAREN RPAREN SEMICOLON

    NEWLINE         shift and go to state 5
    COMMENT1        shift and go to state 6
    ECHO            shift and go to state 14
    VARIABLE        shift and go to state 15
    FUNCTION        shift and go to state 16
    IF              shift and go to state 18
    FOR             shift and go to state 19
    FUNCTION_NAME   shift and go to state 17

    programa                       shift and go to state 170
    bloque                         shift and go to state 2
    comment                        shift and go to state 3
    sentencia                      shift and go to state 4
    print                          shift and go to state 7
    asignacion                     shift and go to state 8
    variable                       shift and go to state 9
    funcion                        shift and go to state 10
    if                             shift and go to state 11
    for                            shift and go to state 12
    invocar                        shift and go to state 13

state 170

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa . RKEY NEWLINE

    RKEY            shift and go to state 171


state 171

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY . NEWLINE

    NEWLINE         shift and go to state 172


state 172

    (24) for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .

    NEWLINE         reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)
    COMMENT1        reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)
    ECHO            reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)
    VARIABLE        reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)
    FUNCTION        reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)
    IF              reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)
    FOR             reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)
    FUNCTION_NAME   reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)
    $end            reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)
    RETURN          reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)
    RKEY            reduce using rule 24 (for -> FOR LPAREN VARIABLE ASSIGN datos SEMICOLON VARIABLE operadorRelacionalNumerico datos SEMICOLON operacionModificadoras RPAREN LKEY NEWLINE programa RKEY NEWLINE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 6 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 24 resolved as shift
